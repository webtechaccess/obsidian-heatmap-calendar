/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/Main.ts
var Main_exports = {};
__export(Main_exports, {
  default: () => Main
});
module.exports = __toCommonJS(Main_exports);
var import_obsidian2 = require("obsidian");

// src/Settings.ts
var import_obsidian = require("obsidian");

// src/Consts.ts
var Descriptions = {
  ["Toggl API Auth" /* TOGGL_API_AUTH */]: "Authenticate with Toggl by providing your API token to fetch time tracking data. Retrieve your token from Toggl Profile Settings. Leave blank to use fake data instead.",
  ["Toggl Workspace ID" /* TOGGL_WORKSPACE_ID */]: "Enter the Workspace ID associated with your Toggl account to fetch data for the correct workspace. Find it in your Toggl Workspace Settings.",
  ["Toggl Project IDs" /* TOGGL_PROJECT_IDS */]: "Enter specific Toggl Project IDs (comma-separated) to filter data for selected projects. Leave blank to include all projects.",
  ["Use Fake Data" /* USE_FAKE_DATA */]: "Enable this option to generate and use fake time tracking data instead of fetching data from Toggl. Useful for testing or demonstrations.",
  ["Year" /* YEAR */]: "Specify the year for which the heatmap calendar will be generated. Must be in YYYY format (e.g., 2023).",
  ["Off Days" /* OFF_DAYS */]: "Specify days you don\u2019t expect to log time (e.g., weekends). Use numbers: Sun = 0, Mon = 1, Tue = 2, Wed = 3, Thu = 4, Fri = 5, Sat = 6. Separate multiple days with commas (e.g., 0,6 for Sun and Sat). Off days do not affect streak lengths.",
  ["Theme" /* THEME */]: "Select a theme to customize the heatmap calendar\u2019s appearance. Choosing a theme will automatically update related style configurations, such as colors and gradients, affecting how the heatmap is displayed.",
  ["Font" /* FONT */]: "Choose the font style for the heatmap calendar. We recommend Iosevka (included in predefined themes) for its clean and modern design. This affects the text displayed in the calendar, such as dates and labels.",
  ["Font Size" /* FONT_SIZE */]: "Set the base font size for the heatmap calendar. Adjusting this value will proportionally scale other text elements, such as labels and annotations. Use a number (e.g., 24).",
  ["Calendar Background" /* CALENDAR_BACKGROUND */]: "Set the background of the heatmap calendar. Use named colors (e.g., white), hex codes (e.g., #fff2 for semi-transparency), or gradients. Gradients are prioritized in themes.",
  ["Calendar Text Color" /* CALENDAR_TEXT_COLOR */]: "Define the color for text elements, including day names, month names, and the year. Use named colors (e.g., black) or hex codes (e.g., #000000).",
  ["Calendar Border Color" /* CALENDAR_BORDER_COLOR */]: "Choose the color for the calendar\u2019s border. Use named colors (e.g., gray) or hex codes (e.g., #cccccc).",
  ["Calendar Border Radius" /* CALENDAR_BORDER_RADIUS */]: "Adjust the corner radius for the calendar\u2019s border to control its roundedness. Use a number (e.g., 5).",
  ["Calendar Padding" /* CALENDAR_PADDING */]: "Set the outer spacing around the entire calendar. Use a number (e.g., 10) to control the margin between the calendar and surrounding elements.",
  ["Tooltip Background" /* TOOLTIP_BACKGROUND */]: "Set the background color for tooltips displayed when hovering over calendar cells. Use named colors (e.g., white), hex codes (e.g., #ffffff), or gradients.",
  ["Tooltip Text Color" /* TOOLTIP_TEXT_COLOR */]: "Define the color of the text inside tooltips. Use named colors (e.g., black) or hex codes (e.g., #000000).",
  ["Normal Day Background" /* NORMAL_DAY_BACKGROUND */]: "Set the background color for regular days. Use named colors (e.g., lightgray) or hex codes (e.g., #f0f0f0).",
  ["Off Day Background" /* OFF_DAY_BACKGROUND */]: "Define the background color for off days (e.g., weekends or holidays). Use named colors (e.g., gray) or hex codes (e.g., #cccccc).",
  ["Intensity Color" /* INTENSITY_COLOR */]: "Choose the color gradient used to represent activity intensity in the heatmap. Use named colors, hex codes, or gradients.",
  ["Statistics Color" /* STATISTICS_COLOR */]: "Set the color for statistical elements (e.g., averages or totals) displayed in the calendar. Use named colors or hex codes.",
  ["Billable Report Color" /* BILLABLE_REPORT_COLOR */]: "Define the color for billable hours or reports in the heatmap. Use named colors or hex codes.",
  ["Payed Hours" /* PAYED_HOURS */]: "Enter the total hours that have already been paid. This helps track remaining billable hours.",
  ["Hourly Rate" /* HOURLY_RATE */]: "Set the hourly rate used for calculating billable amounts. Enter a numeric value (e.g., 50).",
  ["Hourly Rate Currency" /* HOURLY_RATE_CURRENCY */]: "Specify the currency for the hourly rate (e.g., USD, EUR). This ensures accurate billing calculations.",
  ["Conversion Fee" /* CONVERSION_FEE */]: "Enter any additional fee applied during currency conversion. Use a numeric value (e.g., 0.02 for 2%).",
  ["Conversion Currency" /* CONVERSION_CURRENCY */]: "Set the target currency for conversion (e.g., USD to EUR). This is used for final billing calculations.",
  ["Cell Size" /* CELL_SIZE */]: "Set the size of each cell. Adjust this to control the overall dimensions of the calendar. Use a number around 10 (e.g., 7 to 15).",
  ["Line Height" /* LINE_HEIGHT */]: "Define the height of lines for statistics, billable reports, and other text blocks. Use a number (e.g., 20) for consistent spacing.",
  ["Show Billable Information" /* SHOW_BILLABLE_STATS */]: "Enable this option to display billable information (e.g., payed, remains).",
  ["Show General Statistics" /* SHOW_GENERAL_STATS */]: "Enable this option to display general statistics (e.g., total hours, averages).",
  ["Show Streaks Statistics" /* SHOW_STREAKS_STATS */]: "Enable this option to display streak statistics (e.g., longest streak, current streak)."
};
var IntensityColors = {
  "#ff0000": "Red",
  "#00ff00": "Green",
  "#0000ff": "Blue",
  "#ffff00": "Yellow",
  "#ff00ff": "Magenta",
  "#00ffff": "Cyan",
  "#ffffff": "White",
  "#ff8800": "Orange",
  "#ff0088": "Pink",
  "#88ff00": "Lime",
  "#00ff88": "Mint",
  "#8800ff": "Purple",
  "#0088ff": "Azure"
};
var Days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];

// src/Themes.ts
var General = {
  ["Font" /* FONT */]: "Iosevka, Courier New, monospace",
  ["Font Size" /* FONT_SIZE */]: 12,
  ["Calendar Border Radius" /* CALENDAR_BORDER_RADIUS */]: 10,
  ["Calendar Padding" /* CALENDAR_PADDING */]: 20,
  ["Cell Size" /* CELL_SIZE */]: 10,
  ["Line Height" /* LINE_HEIGHT */]: 16
};
var Dark = {
  ["Font" /* FONT */]: General["Font" /* FONT */],
  ["Font Size" /* FONT_SIZE */]: General["Font Size" /* FONT_SIZE */],
  ["Calendar Border Radius" /* CALENDAR_BORDER_RADIUS */]: General["Calendar Border Radius" /* CALENDAR_BORDER_RADIUS */],
  ["Calendar Padding" /* CALENDAR_PADDING */]: General["Calendar Padding" /* CALENDAR_PADDING */],
  ["Cell Size" /* CELL_SIZE */]: General["Cell Size" /* CELL_SIZE */],
  ["Line Height" /* LINE_HEIGHT */]: General["Line Height" /* LINE_HEIGHT */],
  ["Calendar Background" /* CALENDAR_BACKGROUND */]: "linear-gradient(to bottom right, #111, #272727)",
  ["Calendar Text Color" /* CALENDAR_TEXT_COLOR */]: "#ddd",
  ["Calendar Border Color" /* CALENDAR_BORDER_COLOR */]: "#333",
  ["Normal Day Background" /* NORMAL_DAY_BACKGROUND */]: "#444",
  ["Off Day Background" /* OFF_DAY_BACKGROUND */]: "#2a2a2a",
  ["Statistics Color" /* STATISTICS_COLOR */]: "white",
  ["Billable Report Color" /* BILLABLE_REPORT_COLOR */]: "white",
  ["Tooltip Background" /* TOOLTIP_BACKGROUND */]: "white",
  ["Tooltip Text Color" /* TOOLTIP_TEXT_COLOR */]: "black"
};
var Light = {
  ["Font" /* FONT */]: General["Font" /* FONT */],
  ["Font Size" /* FONT_SIZE */]: General["Font Size" /* FONT_SIZE */],
  ["Calendar Border Radius" /* CALENDAR_BORDER_RADIUS */]: General["Calendar Border Radius" /* CALENDAR_BORDER_RADIUS */],
  ["Calendar Padding" /* CALENDAR_PADDING */]: General["Calendar Padding" /* CALENDAR_PADDING */],
  ["Cell Size" /* CELL_SIZE */]: General["Cell Size" /* CELL_SIZE */],
  ["Line Height" /* LINE_HEIGHT */]: General["Line Height" /* LINE_HEIGHT */],
  ["Calendar Background" /* CALENDAR_BACKGROUND */]: "linear-gradient(to bottom right, #eee, #f7f7f7)",
  ["Calendar Text Color" /* CALENDAR_TEXT_COLOR */]: "#333",
  ["Calendar Border Color" /* CALENDAR_BORDER_COLOR */]: "#ddd",
  ["Normal Day Background" /* NORMAL_DAY_BACKGROUND */]: "#ccc",
  ["Off Day Background" /* OFF_DAY_BACKGROUND */]: "#e4e4e4",
  ["Statistics Color" /* STATISTICS_COLOR */]: "black",
  ["Billable Report Color" /* BILLABLE_REPORT_COLOR */]: "black",
  ["Tooltip Background" /* TOOLTIP_BACKGROUND */]: "black",
  ["Tooltip Text Color" /* TOOLTIP_TEXT_COLOR */]: "white"
};
var Vivid = {
  ["Font" /* FONT */]: General["Font" /* FONT */],
  ["Font Size" /* FONT_SIZE */]: General["Font Size" /* FONT_SIZE */],
  ["Calendar Border Radius" /* CALENDAR_BORDER_RADIUS */]: General["Calendar Border Radius" /* CALENDAR_BORDER_RADIUS */],
  ["Calendar Padding" /* CALENDAR_PADDING */]: General["Calendar Padding" /* CALENDAR_PADDING */],
  ["Cell Size" /* CELL_SIZE */]: General["Cell Size" /* CELL_SIZE */],
  ["Line Height" /* LINE_HEIGHT */]: General["Line Height" /* LINE_HEIGHT */],
  ["Calendar Background" /* CALENDAR_BACKGROUND */]: "linear-gradient(to bottom right, #822, #228)",
  ["Calendar Text Color" /* CALENDAR_TEXT_COLOR */]: "#ccc",
  ["Calendar Border Color" /* CALENDAR_BORDER_COLOR */]: "#888",
  ["Normal Day Background" /* NORMAL_DAY_BACKGROUND */]: "#fff4",
  ["Off Day Background" /* OFF_DAY_BACKGROUND */]: "#faa2",
  ["Statistics Color" /* STATISTICS_COLOR */]: "#ddf",
  ["Billable Report Color" /* BILLABLE_REPORT_COLOR */]: "#ff0",
  ["Tooltip Background" /* TOOLTIP_BACKGROUND */]: "#228c",
  ["Tooltip Text Color" /* TOOLTIP_TEXT_COLOR */]: "white"
};
var Minimal = {
  ["Font" /* FONT */]: General["Font" /* FONT */],
  ["Font Size" /* FONT_SIZE */]: 0,
  ["Calendar Border Radius" /* CALENDAR_BORDER_RADIUS */]: 0,
  ["Calendar Padding" /* CALENDAR_PADDING */]: 0,
  ["Cell Size" /* CELL_SIZE */]: 6,
  ["Line Height" /* LINE_HEIGHT */]: 0,
  ["Calendar Background" /* CALENDAR_BACKGROUND */]: "",
  ["Calendar Text Color" /* CALENDAR_TEXT_COLOR */]: "",
  ["Calendar Border Color" /* CALENDAR_BORDER_COLOR */]: "",
  ["Normal Day Background" /* NORMAL_DAY_BACKGROUND */]: "#8886",
  ["Off Day Background" /* OFF_DAY_BACKGROUND */]: "#8883",
  ["Statistics Color" /* STATISTICS_COLOR */]: "",
  ["Billable Report Color" /* BILLABLE_REPORT_COLOR */]: "",
  ["Tooltip Background" /* TOOLTIP_BACKGROUND */]: "",
  ["Tooltip Text Color" /* TOOLTIP_TEXT_COLOR */]: ""
};

// src/Helper.ts
var Helper = class {
  static fixLength(str, length) {
    return str.padEnd(length, " ");
  }
  static computeFont(params, size) {
    return size / 12 * params["Font Size" /* FONT_SIZE */] + "px " + params["Font" /* FONT */];
  }
  static isNumber(str) {
    if (typeof str !== "string" || str.trim() === "") {
      return false;
    }
    return !isNaN(parseFloat(str));
  }
  static convertToHourMin(duration) {
    if (isNaN(duration)) {
      return "0:00";
    }
    const hours = Math.floor(duration);
    const minutes = Math.round((duration - hours) * 60);
    return `${hours}:${minutes.toString().padStart(2, "0")}`;
  }
  static generateHex(length) {
    const characters = "0123456789abcdef";
    let result = "";
    for (let i = 0; i < length; i++) {
      result += characters.charAt(Math.floor(Math.random() * characters.length));
    }
    return result;
  }
  static getDayOfWeek(dateString) {
    const date = new Date(dateString);
    return date.getDay();
  }
  static getColor(params, value, max) {
    const minValue = 75;
    const intensity = Math.floor(value / max * (255 - minValue) + minValue);
    const maxIntensityColor = params["Intensity Color" /* INTENSITY_COLOR */];
    const hexToRgb = (hex) => {
      const r = parseInt(hex.slice(1, 3), 16);
      const g = parseInt(hex.slice(3, 5), 16);
      const b = parseInt(hex.slice(5, 7), 16);
      return { r, g, b };
    };
    const computeLowerIntensity = (color, intensity2) => {
      const { r, g, b } = hexToRgb(color);
      const scale = intensity2 / 255;
      return `rgb(${Math.floor(r * scale)}, ${Math.floor(g * scale)}, ${Math.floor(b * scale)})`;
    };
    return computeLowerIntensity(maxIntensityColor, intensity);
  }
  static getStreaks(params, times) {
    const dates = Object.keys(times).map((date) => new Date(date));
    dates.sort((a, b) => a.getTime() - b.getTime());
    let streaks = [];
    let currentStreak = 1;
    for (let i = 1; i < dates.length; i++) {
      let isOff = params["Off Days" /* OFF_DAYS */].includes(dates[i - 1].getDay());
      const diffInDays = (dates[i].getTime() - dates[i - 1].getTime()) / (1e3 * 60 * 60 * 24);
      if (diffInDays === 1 || isOff) {
        currentStreak++;
      } else {
        streaks.push(currentStreak);
        currentStreak = 1;
      }
    }
    streaks.push(currentStreak);
    return streaks;
  }
  static computeStreakStats(params, times) {
    const streaks = this.getStreaks(params, times);
    const streakCount = streaks.length;
    const averageStreak = streaks.reduce((acc, val) => acc + val, 0) / streakCount;
    const longestStreak = Math.max(...streaks);
    return { streakCount, averageStreak, longestStreak };
  }
};

// src/Canvas.ts
var _Canvas = class {
  static setError(title) {
    _Canvas.error = title;
  }
  static clearError() {
    _Canvas.error = void 0;
  }
  static render(div, params, times) {
    const durations = Object.values(times).map((item) => item.totalDuration);
    const minDuration = Math.min(...durations);
    const maxDuration = Math.max(...durations);
    let totalSum = 0;
    for (let date in times) {
      totalSum += times[date].totalDuration;
    }
    const averageDuration = durations.reduce((acc, val) => acc + val, 0) / 365;
    const varianceDuration = durations.reduce((acc, val) => acc + Math.pow(val - averageDuration, 2), 0) / 365;
    const stdDevDuration = Math.sqrt(varianceDuration);
    const stats = Helper.computeStreakStats(params, times);
    const existingCanvas = div.querySelectorAll("canvas");
    existingCanvas.forEach((canvas2) => canvas2.remove());
    const canvas = document.createElement("canvas");
    const tooltipCanvas = document.createElement("canvas");
    const cellSize = params["Cell Size" /* CELL_SIZE */];
    const padding = cellSize / 5;
    let topOffset = params["Calendar Padding" /* CALENDAR_PADDING */] + params["Line Height" /* LINE_HEIGHT */];
    let leftOffset = params["Calendar Padding" /* CALENDAR_PADDING */] + 30;
    let lineCount = 0;
    if (params["Show Billable Information" /* SHOW_BILLABLE_STATS */])
      lineCount++;
    if (params["Show Streaks Statistics" /* SHOW_STREAKS_STATS */])
      lineCount++;
    if (params["Show General Statistics" /* SHOW_GENERAL_STATS */])
      lineCount++;
    if (lineCount > 0)
      lineCount++;
    if (params["Font Size" /* FONT_SIZE */] === 0) {
      lineCount = 0;
      topOffset = params["Calendar Padding" /* CALENDAR_PADDING */];
      leftOffset = params["Calendar Padding" /* CALENDAR_PADDING */];
    }
    let bottomOffset = lineCount * params["Line Height" /* LINE_HEIGHT */];
    let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    if (params["Year" /* YEAR */] % 4 === 0)
      daysInMonth[1] = 29;
    let yIndex = 0;
    let xIndex = 0;
    let lastRenderX = 0;
    for (let month = 0; month < 12; month++) {
      for (let day = 1; day <= daysInMonth[month]; day++) {
        const x = xIndex * (cellSize + padding);
        const renderX = x + month * (cellSize + padding + cellSize) + leftOffset;
        lastRenderX = renderX;
        yIndex++;
        if (yIndex === 7) {
          xIndex++;
          yIndex = 0;
        }
      }
    }
    canvas.width = lastRenderX + cellSize + params["Calendar Padding" /* CALENDAR_PADDING */];
    canvas.height = 7 * (cellSize + padding) + topOffset + bottomOffset + params["Calendar Padding" /* CALENDAR_PADDING */];
    tooltipCanvas.width = canvas.width;
    tooltipCanvas.height = canvas.height;
    tooltipCanvas.style.position = "absolute";
    tooltipCanvas.style.top = "0";
    tooltipCanvas.style.pointerEvents = "none";
    if (params["Calendar Border Color" /* CALENDAR_BORDER_COLOR */]) {
      canvas.style.border = "1px solid " + params["Calendar Border Color" /* CALENDAR_BORDER_COLOR */];
    }
    canvas.style.borderRadius = params["Calendar Border Radius" /* CALENDAR_BORDER_RADIUS */] + "px";
    canvas.style.background = params["Calendar Background" /* CALENDAR_BACKGROUND */];
    canvas.style.display = "block";
    const ctx = canvas.getContext("2d");
    if (!ctx)
      return;
    function drawText(text, x, y2) {
      const dimFilter = "opacity(0.75)";
      ctx.filter = dimFilter;
      const parts = text.split(/(<|>)/);
      parts.forEach((part) => {
        if (part === "<") {
          ctx.filter = "none";
        } else if (part === ">") {
          ctx.filter = dimFilter;
        } else {
          ctx.fillText(part, x, y2);
          x += ctx.measureText(part).width;
        }
      });
      ctx.filter = "none";
    }
    ctx.imageSmoothingEnabled = true;
    if (_Canvas.error) {
      const lines = _Canvas.error.split("\n");
      const title = lines[0];
      const descriptions = lines.slice(1);
      let y2 = 30;
      ctx.fillStyle = "#212";
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      ctx.textAlign = "center";
      ctx.textBaseline = "middle";
      ctx.fillStyle = "#f44";
      ctx.font = Helper.computeFont(params, 20);
      ctx.fillText(title, canvas.width / 2, y2);
      if (descriptions) {
        ctx.font = Helper.computeFont(params, 16);
        ctx.textAlign = "left";
        ctx.fillStyle = "#aaa";
        descriptions.forEach((line) => {
          y2 += 20;
          ctx.fillText(line, 20, y2);
        });
      }
      div.innerText = "";
      div.appendChild(canvas);
      return;
    }
    const tooltipCtx = tooltipCanvas.getContext("2d");
    const monthNames = [...Array(12)].map((_, i) => new Date(0, i).toLocaleString("default", { month: "short" }));
    ctx.textAlign = "left";
    ctx.textBaseline = "top";
    ctx.font = Helper.computeFont(params, 14);
    ctx.fillStyle = params["Calendar Text Color" /* CALENDAR_TEXT_COLOR */];
    ctx.fillText("" + params["Year" /* YEAR */], params["Calendar Padding" /* CALENDAR_PADDING */], params["Calendar Padding" /* CALENDAR_PADDING */]);
    for (let i = 0; i < Days.length; i++) {
      const x = params["Calendar Padding" /* CALENDAR_PADDING */];
      const y2 = i * (cellSize + padding) + topOffset + cellSize / 2;
      ctx.textAlign = "left";
      ctx.textBaseline = "middle";
      ctx.font = Helper.computeFont(params, 11);
      ctx.fillStyle = params["Calendar Text Color" /* CALENDAR_TEXT_COLOR */];
      ctx.fillText(Days[i], x, y2);
    }
    yIndex = 0;
    xIndex = 0;
    let cellData = [];
    lastRenderX = 0;
    let maxY = 0;
    yIndex = Helper.getDayOfWeek(params["Year" /* YEAR */] + "-01-01");
    for (let month = 0; month < 12; month++) {
      for (let day = 1; day <= daysInMonth[month]; day++) {
        const date = `${params["Year" /* YEAR */]}-${String(month + 1).padStart(2, "0")}-${String(day).padStart(2, "0")}`;
        const value = times[date];
        const duration = value ? value.totalDuration : 0;
        const humanize = value ? value.humanize : "0:00";
        const x = xIndex * (cellSize + padding);
        const y2 = yIndex * (cellSize + padding);
        const renderX = x + month * (cellSize + padding + cellSize) + leftOffset;
        const renderY = y2 + topOffset;
        lastRenderX = renderX;
        if (renderY > maxY) {
          maxY = renderY;
        }
        ctx.fillStyle = "transparent";
        if (value) {
          ctx.fillStyle = Helper.getColor(params, duration, maxDuration);
        } else {
          if (params["Off Days" /* OFF_DAYS */].includes(yIndex)) {
            ctx.fillStyle = params["Off Day Background" /* OFF_DAY_BACKGROUND */];
          } else {
            ctx.fillStyle = params["Normal Day Background" /* NORMAL_DAY_BACKGROUND */];
          }
        }
        ctx.fillRect(renderX, renderY, cellSize, cellSize);
        cellData.push({ date, x: renderX, y: renderY, width: cellSize, height: cellSize, value: humanize != null ? humanize : 0 });
        yIndex++;
        if (yIndex === 7) {
          xIndex++;
          yIndex = 0;
        }
      }
      ctx.font = Helper.computeFont(params, 12);
      ctx.fillStyle = params["Calendar Text Color" /* CALENDAR_TEXT_COLOR */];
      ctx.textAlign = "right";
      ctx.textBaseline = "top";
      ctx.fillText(monthNames[month], lastRenderX - cellSize, params["Calendar Padding" /* CALENDAR_PADDING */]);
    }
    ctx.textBaseline = "top";
    let y = maxY + params["Line Height" /* LINE_HEIGHT */];
    function addStat(name, value) {
      return Helper.fixLength(name + ": <" + value, 25) + ">";
    }
    if (params["Show Billable Information" /* SHOW_BILLABLE_STATS */]) {
      y += params["Line Height" /* LINE_HEIGHT */];
      let total = Math.round(totalSum * params["Hourly Rate" /* HOURLY_RATE */]);
      let payed = params["Payed Hours" /* PAYED_HOURS */] * params["Hourly Rate" /* HOURLY_RATE */];
      let remains = total - payed;
      let converted = remains * params["Conversion Fee" /* CONVERSION_FEE */];
      let payStr = addStat("Payed" /* PAYED */, new Intl.NumberFormat().format(payed) + " " + params["Hourly Rate Currency" /* HOURLY_RATE_CURRENCY */]);
      payStr += addStat("Payable" /* PAYABLE */, new Intl.NumberFormat().format(total) + " " + params["Hourly Rate Currency" /* HOURLY_RATE_CURRENCY */]);
      payStr += addStat("Remains" /* REMAINS */, new Intl.NumberFormat().format(remains) + " " + params["Hourly Rate Currency" /* HOURLY_RATE_CURRENCY */]);
      payStr += addStat("Billable" /* BILLABLE */, new Intl.NumberFormat().format(converted) + " " + params["Conversion Currency" /* CONVERSION_CURRENCY */]);
      ctx.textAlign = "left";
      ctx.font = Helper.computeFont(params, 14);
      ctx.fillStyle = params["Billable Report Color" /* BILLABLE_REPORT_COLOR */];
      drawText(payStr, params["Calendar Padding" /* CALENDAR_PADDING */], y);
    }
    if (params["Show General Statistics" /* SHOW_GENERAL_STATS */]) {
      y += params["Line Height" /* LINE_HEIGHT */];
      let str = addStat("Average" /* AVERAGE */, Helper.convertToHourMin(averageDuration));
      str += addStat("Deviation" /* DEV */, Helper.convertToHourMin(stdDevDuration));
      str += addStat("Minimum" /* MIN */, Helper.convertToHourMin(minDuration));
      str += addStat("Maximum" /* MAX */, Helper.convertToHourMin(maxDuration));
      str += addStat("Summary" /* SUM */, Helper.convertToHourMin(totalSum));
      ctx.textAlign = "left";
      ctx.font = Helper.computeFont(params, 14);
      ctx.fillStyle = params["Statistics Color" /* STATISTICS_COLOR */];
      drawText(str, params["Calendar Padding" /* CALENDAR_PADDING */], y);
    }
    if (params["Show Streaks Statistics" /* SHOW_STREAKS_STATS */]) {
      y += params["Line Height" /* LINE_HEIGHT */];
      let str = addStat("Streaks" /* STREAK_COUNT */, stats.streakCount);
      str += addStat("Average" /* AVERAGE_STREAK */, Math.round(stats.averageStreak));
      str += addStat("Longest" /* LONGEST_STREAK */, stats.longestStreak);
      ctx.textAlign = "left";
      ctx.font = Helper.computeFont(params, 14);
      ctx.fillStyle = params["Statistics Color" /* STATISTICS_COLOR */];
      drawText(str, params["Calendar Padding" /* CALENDAR_PADDING */], y);
    }
    div.innerText = "";
    div.appendChild(canvas);
    div.appendChild(tooltipCanvas);
    if (!tooltipCtx) {
      return;
    }
    canvas.addEventListener("mousemove", (event) => {
      const mouseX = event.offsetX;
      const mouseY = event.offsetY;
      let found = false;
      tooltipCtx.clearRect(0, 0, tooltipCanvas.width, tooltipCanvas.height);
      if (params["Tooltip Background" /* TOOLTIP_BACKGROUND */]) {
        for (let cell of cellData) {
          if (mouseX >= cell.x && mouseX <= cell.x + cell.width && mouseY >= cell.y && mouseY <= cell.y + cell.height) {
            tooltipCtx.fillStyle = params["Tooltip Background" /* TOOLTIP_BACKGROUND */];
            tooltipCtx.fillRect(mouseX - 150 / 2, mouseY + 5, 150, 30);
            tooltipCtx.textAlign = "center";
            tooltipCtx.font = Helper.computeFont(params, 12);
            tooltipCtx.fillStyle = params["Tooltip Text Color" /* TOOLTIP_TEXT_COLOR */];
            tooltipCtx.fillText(`${cell.date} | ${cell.value} Hours`, mouseX, mouseY + 25);
            found = true;
            break;
          }
        }
      }
      if (!found) {
        tooltipCtx.clearRect(0, 0, tooltipCanvas.width, tooltipCanvas.height);
      }
    });
    canvas.addEventListener("mouseout", (event) => {
      tooltipCtx.clearRect(0, 0, tooltipCanvas.width, tooltipCanvas.height);
    });
  }
};
var Canvas = _Canvas;
Canvas.error = void 0;

// src/Settings.ts
var _Settings = class extends import_obsidian.Modal {
  constructor(app, config, onSubmit) {
    super(app);
    this.tabsContent = [];
    this.tabsNames = ["Query", "Style", "Billable", "Stats", "Donate"];
    this.config = config;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const that = this;
    const { containerEl, contentEl } = this;
    containerEl.addClass("clhc");
    const header = this.titleEl;
    header.innerHTML = "Settings" /* SETTINGS_TITLE */;
    let params = {};
    Object.entries(this.config).forEach(([key, value]) => {
      params[key] = value;
    });
    this.tabContainer = contentEl.createDiv({ cls: "tabs" });
    this.tabContentContainer = contentEl.createDiv({ cls: "tab-content" });
    for (let i = 0; i < this.tabsNames.length; i++) {
      const tab = this.tabContainer.createEl("button", { text: this.tabsNames[i] });
      tab.onclick = () => this.showTab(i);
      this.tabsContent.push(this.tabContentContainer.createDiv());
    }
    let tabQuery = this.tabsContent[0];
    let tabStyle = this.tabsContent[1];
    let tabBillable = this.tabsContent[2];
    let tabStats = this.tabsContent[3];
    let tabDonation = this.tabsContent[4];
    function add(tab, type, name, options = null, onChange = null) {
      var _a;
      const key = name;
      const setting = new import_obsidian.Setting(tab).setDesc((_a = Descriptions[key]) != null ? _a : "");
      const callback = (control) => {
        var _a2;
        _Settings.componentMap[key] = control;
        if (type.includes("select")) {
          control.addOptions(options);
        }
        if (type === "number") {
          control.setValue("" + params[key]);
        } else if (type.includes("array")) {
          control.setValue(JSON.parse((_a2 = params[key]) != null ? _a2 : "[]").join(", "));
        } else {
          control.setValue(params[key]);
        }
        control.updateValue = (value) => {
          control.setValue(value);
          control.updateValueCore(value);
        };
        control.updateValueCore = (value) => {
          Canvas.clearError();
          if (key === "Toggl API Auth" /* TOGGL_API_AUTH */ || key === "Toggl Workspace ID" /* TOGGL_WORKSPACE_ID */ || key === "Use Fake Data" /* USE_FAKE_DATA */ || key === "Year" /* YEAR */ || key === "Toggl Project IDs" /* TOGGL_PROJECT_IDS */ || key === "Off Days" /* OFF_DAYS */) {
            Main.clearCache();
          }
          if (type === "number") {
            params[key] = parseInt(value);
          } else if (type.includes("array")) {
            params[key] = `[${value.split(",").map((item) => item.trim()).join(",")}]`;
          } else {
            params[key] = value;
          }
          Main.validate(params);
          if (onChange)
            onChange(value);
          that.onSubmit(params);
        };
        control.onChange((value) => {
          control.updateValueCore(value);
        });
        if (type.includes("long")) {
          control.inputEl.style.width = "65%";
        }
      };
      if (type === "check") {
        setting.addToggle(callback);
      } else if (type.includes("select")) {
        setting.addDropdown(callback);
      } else {
        setting.addText(callback);
      }
      const descEl = document.createElement("div");
      descEl.textContent = name;
      setting.controlEl.insertBefore(descEl, setting.controlEl.firstChild);
      _Settings.settingsMap[key] = setting;
      return setting;
    }
    add(tabQuery, "long-text", "Toggl API Auth" /* TOGGL_API_AUTH */);
    add(tabQuery, "number", "Toggl Workspace ID" /* TOGGL_WORKSPACE_ID */);
    add(tabQuery, "check", "Use Fake Data" /* USE_FAKE_DATA */);
    add(tabQuery, "number", "Year" /* YEAR */);
    add(tabQuery, "long-array", "Toggl Project IDs" /* TOGGL_PROJECT_IDS */);
    add(tabQuery, "array", "Off Days" /* OFF_DAYS */);
    add(tabQuery, "select", "Intensity Color" /* INTENSITY_COLOR */, IntensityColors);
    function applyTheme(theme) {
      Object.entries(theme).forEach(([key, value]) => {
        _Settings.componentMap[key].updateValue(value);
      });
    }
    add(tabStyle, "select", "Theme" /* THEME */, {
      dark: "Dark",
      light: "Light",
      vivid: "Vivid",
      minimal: "Minimal"
    }, (value) => {
      if (value === "dark") {
        applyTheme(Dark);
      }
      if (value === "light") {
        applyTheme(Light);
      }
      if (value === "vivid") {
        applyTheme(Vivid);
      }
      if (value === "minimal") {
        applyTheme(Minimal);
      }
    });
    add(tabStyle, "long-text", "Font" /* FONT */);
    add(tabStyle, "number", "Font Size" /* FONT_SIZE */);
    add(tabStyle, "long-text", "Calendar Background" /* CALENDAR_BACKGROUND */);
    add(tabStyle, "color", "Calendar Text Color" /* CALENDAR_TEXT_COLOR */);
    add(tabStyle, "color", "Calendar Border Color" /* CALENDAR_BORDER_COLOR */);
    add(tabStyle, "number", "Calendar Border Radius" /* CALENDAR_BORDER_RADIUS */);
    add(tabStyle, "number", "Calendar Padding" /* CALENDAR_PADDING */);
    add(tabStyle, "color", "Normal Day Background" /* NORMAL_DAY_BACKGROUND */);
    add(tabStyle, "color", "Off Day Background" /* OFF_DAY_BACKGROUND */);
    add(tabStyle, "color", "Tooltip Background" /* TOOLTIP_BACKGROUND */);
    add(tabStyle, "color", "Tooltip Text Color" /* TOOLTIP_TEXT_COLOR */);
    add(tabStyle, "color", "Statistics Color" /* STATISTICS_COLOR */);
    add(tabStyle, "color", "Billable Report Color" /* BILLABLE_REPORT_COLOR */);
    add(tabStyle, "number", "Cell Size" /* CELL_SIZE */);
    add(tabStyle, "number", "Line Height" /* LINE_HEIGHT */);
    add(tabBillable, "number", "Payed Hours" /* PAYED_HOURS */);
    add(tabBillable, "number", "Hourly Rate" /* HOURLY_RATE */);
    add(tabBillable, "text", "Hourly Rate Currency" /* HOURLY_RATE_CURRENCY */);
    add(tabBillable, "number", "Conversion Fee" /* CONVERSION_FEE */);
    add(tabBillable, "text", "Conversion Currency" /* CONVERSION_CURRENCY */);
    add(tabStats, "check", "Show Billable Information" /* SHOW_BILLABLE_STATS */);
    add(tabStats, "check", "Show General Statistics" /* SHOW_GENERAL_STATS */);
    add(tabStats, "check", "Show Streaks Statistics" /* SHOW_STREAKS_STATS */);
    this.showTab(0);
    this.makeMovable(this.modalEl, header);
  }
  makeMovable(modal, header) {
    let isDragging = false;
    let startX = 0, startY = 0, offsetX = 0, offsetY = 0;
    header.addEventListener("mousedown", (e) => {
      isDragging = true;
      offsetX = modal.offsetLeft;
      offsetY = modal.offsetTop;
      startX = e.clientX;
      startY = e.clientY;
      document.addEventListener("mousemove", onMouseMove);
      document.addEventListener("mouseup", onMouseUp);
    });
    const onMouseMove = (e) => {
      if (!isDragging)
        return;
      const newLeft = offsetX + (e.clientX - startX);
      const newTop = offsetY + (e.clientY - startY);
      modal.style.position = "absolute";
      modal.style.left = `${newLeft}px`;
      modal.style.top = `${newTop}px`;
    };
    const onMouseUp = () => {
      isDragging = false;
      document.removeEventListener("mousemove", onMouseMove);
      document.removeEventListener("mouseup", onMouseUp);
    };
  }
  showTab(index) {
    var _a, _b;
    this.tabsContent.forEach((tabContent) => {
      tabContent.style.display = "none";
      tabContent.style.height = "0";
      tabContent.classList.remove("active");
    });
    for (let i = 0; i < this.tabsNames.length; i++) {
      (_a = this.tabContainer.querySelector(`button:nth-child(${i + 1})`)) == null ? void 0 : _a.classList.remove("active");
    }
    (_b = this.tabContainer.querySelector(`button:nth-child(${index + 1})`)) == null ? void 0 : _b.classList.add("active");
    let currentTab = this.tabsContent[index];
    currentTab.style.display = "block";
    currentTab.style.height = "300px";
    currentTab.classList.add("active");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var Settings = _Settings;
Settings.settingsMap = {};
Settings.componentMap = {};

// src/providers/Fake.ts
var _Fake = class {
  static randomDuration() {
    return parseFloat((Math.random() * 2).toFixed(10));
  }
  static humanizeDuration(duration) {
    const hours = Math.floor(duration);
    const minutes = Math.round((duration - hours) * 60);
    return `${hours}:${minutes.toString().padStart(2, "0")}`;
  }
  static randomDate(year) {
    const start = new Date(year, 0, 1);
    const end = new Date(year, 11, 31);
    const randomTime = start.getTime() + Math.random() * (end.getTime() - start.getTime());
    const randomDate = new Date(randomTime);
    return randomDate.toISOString().split("T")[0];
  }
  static fetch(params, onDone) {
    const data = {};
    while (Object.keys(data).length < _Fake.RECORDS_COUNT) {
      const date = this.randomDate(params["Year" /* YEAR */]);
      if (!data[date]) {
        const totalDuration = this.randomDuration();
        data[date] = {
          totalDuration,
          entries: [],
          humanize: this.humanizeDuration(totalDuration)
        };
      }
    }
    onDone(data);
  }
};
var Fake = _Fake;
Fake.RECORDS_COUNT = 50;

// src/providers/Toggl.ts
var Toggl = class {
  static async fetch(params, onDone) {
    var _a;
    const apiToken = params["Toggl API Auth" /* TOGGL_API_AUTH */];
    if (!apiToken || apiToken.length !== 32) {
      Canvas.setError("Invalid or Missing Toggl API Token\n\nThe provided Toggl API token is either missing or invalid.\nPlease ensure the following:\n  1. Enter a valid API token from your Toggl account.\n  2. Verify the token length and ensure it matches the required format.\n\nYou can retrieve your API token from your Toggl Profile Settings.\nFor further assistance, refer to the Toggl API documentation." /* ERROR_INVALID_TOGGL_API_AUTH */);
      onDone({});
      return;
    }
    const workspaceId = params["Toggl Workspace ID" /* TOGGL_WORKSPACE_ID */];
    if (!workspaceId) {
      Canvas.setError("Invalid Workspace ID\n\nThe provided Toggl Workspace ID is invalid. Please ensure the following:\n  1. Enter the correct Workspace ID associated with your Toggl account.\n  2. Verify the ID matches the format expected by the Toggl API.\n\nYou can find your Workspace ID in your Toggl Workspace Settings.\nFor further details, consult the Toggl API documentation." /* ERROR_INVALID_TOGGL_WORKSPACE_ID */);
      onDone({});
      return;
    }
    const projectIds = JSON.parse((_a = params["Toggl Project IDs" /* TOGGL_PROJECT_IDS */]) != null ? _a : "[]");
    const dailySummary = {};
    let projects = "";
    if (projectIds.length > 0) {
      projects = "&project_ids=" + projectIds.join(",");
    }
    const togglApiUrl = `https://api.track.toggl.com/reports/api/v2/details?workspace_id=${workspaceId}&user_agent=heatmap&since=${params["Year" /* YEAR */]}-01-01&until=${params["Year" /* YEAR */]}-12-31&per_page=1000000${projects}`;
    try {
      const headers = {
        "Authorization": "Basic " + btoa(apiToken + ":api_token")
      };
      const timeEntries = await this.fetchAllTimeEntries(togglApiUrl, headers);
      timeEntries.forEach((entry) => {
        const date = entry.start.split("T")[0];
        const duration = entry.dur / 1e3 / 60 / 60;
        if (!dailySummary[date]) {
          dailySummary[date] = { totalDuration: 0, entries: [] };
        }
        dailySummary[date].totalDuration += duration;
        dailySummary[date].humanize = Helper.convertToHourMin(dailySummary[date].totalDuration);
      });
    } catch (error) {
    }
    onDone(dailySummary);
  }
  static async fetchAllTimeEntries(url, headers) {
    let allEntries = [];
    const response = await fetch(`${url}`, { method: "GET", headers });
    const data = await response.json();
    allEntries = allEntries.concat(data.data);
    return allEntries;
  }
};

// src/Main.ts
var _Main = class extends import_obsidian2.Plugin {
  static clearCache() {
    _Main.cache = {};
  }
  async onload() {
    this.registerEvent(
      this.app.workspace.on("active-leaf-change", () => {
        _Main.clearCache();
      })
    );
    window.ba_heatmap_renderer = (id, params) => {
      params.id = id;
      return this.render(params);
    };
    this.addCommand({
      id: "insert",
      name: "Insert",
      callback: () => {
        const initialParams = {
          ["Toggl API Auth" /* TOGGL_API_AUTH */]: "",
          ["Toggl Workspace ID" /* TOGGL_WORKSPACE_ID */]: "",
          ["Toggl Project IDs" /* TOGGL_PROJECT_IDS */]: "[]",
          ["Use Fake Data" /* USE_FAKE_DATA */]: true,
          ["Year" /* YEAR */]: new Date().getFullYear(),
          ["Off Days" /* OFF_DAYS */]: "[]",
          ["Theme" /* THEME */]: "Dark",
          ["Calendar Border Color" /* CALENDAR_BORDER_COLOR */]: "",
          ["Intensity Color" /* INTENSITY_COLOR */]: "#00ff88",
          ["Payed Hours" /* PAYED_HOURS */]: 0,
          ["Hourly Rate" /* HOURLY_RATE */]: 0,
          ["Hourly Rate Currency" /* HOURLY_RATE_CURRENCY */]: "USD",
          ["Conversion Fee" /* CONVERSION_FEE */]: 0,
          ["Conversion Currency" /* CONVERSION_CURRENCY */]: "USD",
          ["Show General Statistics" /* SHOW_GENERAL_STATS */]: true,
          ["Show Streaks Statistics" /* SHOW_STREAKS_STATS */]: true,
          ["Show Billable Information" /* SHOW_BILLABLE_STATS */]: true,
          //from theme
          ["Font" /* FONT */]: General["Font" /* FONT */],
          ["Font Size" /* FONT_SIZE */]: General["Font Size" /* FONT_SIZE */],
          ["Calendar Border Radius" /* CALENDAR_BORDER_RADIUS */]: General["Calendar Border Radius" /* CALENDAR_BORDER_RADIUS */],
          ["Calendar Padding" /* CALENDAR_PADDING */]: General["Calendar Padding" /* CALENDAR_PADDING */],
          ["Cell Size" /* CELL_SIZE */]: General["Cell Size" /* CELL_SIZE */],
          ["Line Height" /* LINE_HEIGHT */]: General["Line Height" /* LINE_HEIGHT */],
          ["Calendar Background" /* CALENDAR_BACKGROUND */]: "linear-gradient(to bottom right, #200a, #002a)",
          ["Calendar Text Color" /* CALENDAR_TEXT_COLOR */]: "#fff",
          ["Normal Day Background" /* NORMAL_DAY_BACKGROUND */]: "#222",
          ["Off Day Background" /* OFF_DAY_BACKGROUND */]: "#444",
          ["Statistics Color" /* STATISTICS_COLOR */]: "#ddd",
          ["Billable Report Color" /* BILLABLE_REPORT_COLOR */]: "#fff",
          ["Tooltip Background" /* TOOLTIP_BACKGROUND */]: "#fff",
          ["Tooltip Text Color" /* TOOLTIP_TEXT_COLOR */]: "#000"
        };
        initialParams["id"] = Helper.generateHex(32);
        const script = _Main.generateScript(initialParams);
        const editor = this.getActiveEditor();
        editor.replaceRange(script, editor.getCursor());
        this.openSettings(initialParams);
      }
    });
  }
  getActiveEditor() {
    const activeLeaf = this.app.workspace.activeLeaf;
    if ((activeLeaf == null ? void 0 : activeLeaf.view) instanceof import_obsidian2.MarkdownView) {
      return activeLeaf.view.editor;
    }
    return null;
  }
  static generateScript(attributes) {
    let script = "\n\n```dataviewjs\n";
    script += `dv.paragraph("").appendChild(ba_heatmap_renderer("${attributes.id}", {
`;
    Object.entries(attributes).forEach(([key, value]) => {
      if (key === "id")
        return;
      if (typeof value === "number") {
        script += `  '${key}': ${value},
`;
      } else if (typeof value === "boolean") {
        script += `  '${key}': ${value},
`;
      } else if (Array.isArray(value)) {
        const json = JSON.stringify(value);
        script += `  '${key}': "${json}",
`;
      } else if (typeof value === "string") {
        script += `  '${key}': "${value}",
`;
      }
    });
    script += "}))\n";
    script += "```\n\n";
    return script;
  }
  openSettings(params) {
    new Settings(this.app, params, async (attributes) => {
      const script = _Main.generateScript(attributes);
      const activeFile = this.app.workspace.getActiveFile();
      const fileContent = await this.app.vault.read(activeFile);
      const pattern = new RegExp('\\s*```[^`]*"' + params.id + '"[^`]*```\\s*', "gs");
      const modifiedContent = fileContent.replace(pattern, script);
      await this.app.vault.modify(activeFile, modifiedContent);
    }).open();
  }
  render(params) {
    const div = createEl("div");
    div.style.position = "relative";
    div.innerText = "Loading...";
    div.style.top = "0";
    div.style.margin = "0 auto";
    div.style.display = "inline-block";
    _Main.validate(params);
    const cacheAlias = params.id + "-" + (params["Use Fake Data" /* USE_FAKE_DATA */] ? "fake" : "toggl");
    if (_Main.cache[cacheAlias]) {
      Canvas.render(div, params, _Main.cache[cacheAlias]);
    } else {
      if (params["Use Fake Data" /* USE_FAKE_DATA */]) {
        Fake.fetch(params, (data) => {
          _Main.cache[cacheAlias] = data;
          Canvas.render(div, params, data);
        });
      } else {
        Toggl.fetch(params, (data) => {
          _Main.cache[cacheAlias] = data;
          Canvas.render(div, params, data);
        });
      }
    }
    div.addEventListener("click", () => {
      this.openSettings(params);
    });
    return div;
  }
  static validate(params) {
    if (!params["Year" /* YEAR */] || params["Year" /* YEAR */] < 2e3 || params["Year" /* YEAR */] > 2100) {
      Canvas.setError("Invalid Year\n\nThe provided year is invalid. Please ensure the following:\n  1. Enter a valid year in the correct format (e.g., 2023).\n  2. Ensure the year is within a reasonable range (e.g., 2000-2100).\n\nThis field is required to generate the heatmap calendar." /* ERROR_INVALID_YEAR */);
      return;
    }
    Canvas.clearError();
  }
};
var Main = _Main;
Main.cache = {};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL01haW4udHMiLCAic3JjL1NldHRpbmdzLnRzIiwgInNyYy9Db25zdHMudHMiLCAic3JjL1RoZW1lcy50cyIsICJzcmMvSGVscGVyLnRzIiwgInNyYy9DYW52YXMudHMiLCAic3JjL3Byb3ZpZGVycy9GYWtlLnRzIiwgInNyYy9wcm92aWRlcnMvVG9nZ2wudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7RWRpdG9yLCBNYXJrZG93blZpZXcsIFBsdWdpbn0gZnJvbSAnb2JzaWRpYW4nXG5pbXBvcnQge1NldHRpbmdzfSBmcm9tICcuL1NldHRpbmdzJ1xuaW1wb3J0IHtIZWxwZXJ9IGZyb20gJy4vSGVscGVyJ1xuaW1wb3J0IHtGYWtlfSBmcm9tICcuL3Byb3ZpZGVycy9GYWtlJ1xuaW1wb3J0IHtUb2dnbH0gZnJvbSAnLi9wcm92aWRlcnMvVG9nZ2wnXG5pbXBvcnQge0NhbnZhc30gZnJvbSAnLi9DYW52YXMnXG5pbXBvcnQge0NvbmZpZywgUGhyYXNlc30gZnJvbSAnLi9Db25zdHMnXG5pbXBvcnQge0dlbmVyYWx9IGZyb20gJy4vVGhlbWVzJ1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1haW4gZXh0ZW5kcyBQbHVnaW4ge1xuICBzdGF0aWMgY2FjaGUgPSB7fVxuXG4gIHN0YXRpYyBjbGVhckNhY2hlKCkge1xuICAgIE1haW4uY2FjaGUgPSB7fVxuICB9XG5cbiAgYXN5bmMgb25sb2FkKCkge1xuXG4gICAgdGhpcy5yZWdpc3RlckV2ZW50KFxuICAgICAgdGhpcy5hcHAud29ya3NwYWNlLm9uKCdhY3RpdmUtbGVhZi1jaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgIE1haW4uY2xlYXJDYWNoZSgpXG4gICAgICB9KVxuICAgICk7XG5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgd2luZG93LmJhX2hlYXRtYXBfcmVuZGVyZXIgPSAoaWQsIHBhcmFtcykgPT4ge1xuICAgICAgcGFyYW1zLmlkID0gaWRcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcihwYXJhbXMpXG4gICAgfVxuXG4gICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgIGlkOiAnaW5zZXJ0JyxcbiAgICAgIG5hbWU6ICdJbnNlcnQnLFxuICAgICAgY2FsbGJhY2s6ICgpID0+IHtcbiAgICAgICAgY29uc3QgaW5pdGlhbFBhcmFtcyA9IHtcbiAgICAgICAgICBbQ29uZmlnLlRPR0dMX0FQSV9BVVRIXTogJycsXG4gICAgICAgICAgW0NvbmZpZy5UT0dHTF9XT1JLU1BBQ0VfSURdOiAnJyxcbiAgICAgICAgICBbQ29uZmlnLlRPR0dMX1BST0pFQ1RfSURTXTogJ1tdJyxcbiAgICAgICAgICBbQ29uZmlnLlVTRV9GQUtFX0RBVEFdOiB0cnVlLFxuICAgICAgICAgIFtDb25maWcuWUVBUl06IG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKSxcbiAgICAgICAgICBbQ29uZmlnLk9GRl9EQVlTXTogJ1tdJyxcbiAgICAgICAgICBbQ29uZmlnLlRIRU1FXTogJ0RhcmsnLFxuXG4gICAgICAgICAgW0NvbmZpZy5DQUxFTkRBUl9CT1JERVJfQ09MT1JdOiAnJyxcbiAgICAgICAgICBbQ29uZmlnLklOVEVOU0lUWV9DT0xPUl06ICcjMDBmZjg4JyxcbiAgICAgICAgICBbQ29uZmlnLlBBWUVEX0hPVVJTXTogMCxcbiAgICAgICAgICBbQ29uZmlnLkhPVVJMWV9SQVRFXTogMCxcbiAgICAgICAgICBbQ29uZmlnLkhPVVJMWV9SQVRFX0NVUlJFTkNZXTogJ1VTRCcsXG4gICAgICAgICAgW0NvbmZpZy5DT05WRVJTSU9OX0ZFRV06IDAsXG4gICAgICAgICAgW0NvbmZpZy5DT05WRVJTSU9OX0NVUlJFTkNZXTogJ1VTRCcsXG4gICAgICAgICAgW0NvbmZpZy5TSE9XX0dFTkVSQUxfU1RBVFNdOiB0cnVlLFxuICAgICAgICAgIFtDb25maWcuU0hPV19TVFJFQUtTX1NUQVRTXTogdHJ1ZSxcbiAgICAgICAgICBbQ29uZmlnLlNIT1dfQklMTEFCTEVfU1RBVFNdOiB0cnVlLFxuXG4gICAgICAgICAgLy9mcm9tIHRoZW1lXG4gICAgICAgICAgW0NvbmZpZy5GT05UXTogR2VuZXJhbFtDb25maWcuRk9OVF0sXG4gICAgICAgICAgW0NvbmZpZy5GT05UX1NJWkVdOiBHZW5lcmFsW0NvbmZpZy5GT05UX1NJWkVdLFxuICAgICAgICAgIFtDb25maWcuQ0FMRU5EQVJfQk9SREVSX1JBRElVU106IEdlbmVyYWxbQ29uZmlnLkNBTEVOREFSX0JPUkRFUl9SQURJVVNdLFxuICAgICAgICAgIFtDb25maWcuQ0FMRU5EQVJfUEFERElOR106IEdlbmVyYWxbQ29uZmlnLkNBTEVOREFSX1BBRERJTkddLFxuICAgICAgICAgIFtDb25maWcuQ0VMTF9TSVpFXTogR2VuZXJhbFtDb25maWcuQ0VMTF9TSVpFXSxcbiAgICAgICAgICBbQ29uZmlnLkxJTkVfSEVJR0hUXTogR2VuZXJhbFtDb25maWcuTElORV9IRUlHSFRdLFxuXG4gICAgICAgICAgW0NvbmZpZy5DQUxFTkRBUl9CQUNLR1JPVU5EXTogJ2xpbmVhci1ncmFkaWVudCh0byBib3R0b20gcmlnaHQsICMyMDBhLCAjMDAyYSknLFxuICAgICAgICAgIFtDb25maWcuQ0FMRU5EQVJfVEVYVF9DT0xPUl06ICcjZmZmJyxcbiAgICAgICAgICBbQ29uZmlnLk5PUk1BTF9EQVlfQkFDS0dST1VORF06ICcjMjIyJyxcbiAgICAgICAgICBbQ29uZmlnLk9GRl9EQVlfQkFDS0dST1VORF06ICcjNDQ0JyxcbiAgICAgICAgICBbQ29uZmlnLlNUQVRJU1RJQ1NfQ09MT1JdOiAnI2RkZCcsXG4gICAgICAgICAgW0NvbmZpZy5CSUxMQUJMRV9SRVBPUlRfQ09MT1JdOiAnI2ZmZicsXG4gICAgICAgICAgW0NvbmZpZy5UT09MVElQX0JBQ0tHUk9VTkRdOiAnI2ZmZicsXG4gICAgICAgICAgW0NvbmZpZy5UT09MVElQX1RFWFRfQ09MT1JdOiAnIzAwMCcsXG4gICAgICAgIH1cblxuICAgICAgICBpbml0aWFsUGFyYW1zWydpZCddID0gSGVscGVyLmdlbmVyYXRlSGV4KDMyKVxuXG4gICAgICAgIGNvbnN0IHNjcmlwdCA9IE1haW4uZ2VuZXJhdGVTY3JpcHQoaW5pdGlhbFBhcmFtcylcbiAgICAgICAgY29uc3QgZWRpdG9yID0gdGhpcy5nZXRBY3RpdmVFZGl0b3IoKVxuICAgICAgICBlZGl0b3IucmVwbGFjZVJhbmdlKHNjcmlwdCwgZWRpdG9yLmdldEN1cnNvcigpKVxuXG4gICAgICAgIHRoaXMub3BlblNldHRpbmdzKGluaXRpYWxQYXJhbXMpXG4gICAgICB9LFxuICAgIH0pXG4gIH1cblxuXG4gIGdldEFjdGl2ZUVkaXRvcigpOiBFZGl0b3IgfCBudWxsIHtcbiAgICBjb25zdCBhY3RpdmVMZWFmID0gdGhpcy5hcHAud29ya3NwYWNlLmFjdGl2ZUxlYWZcbiAgICBpZiAoYWN0aXZlTGVhZj8udmlldyBpbnN0YW5jZW9mIE1hcmtkb3duVmlldykge1xuICAgICAgcmV0dXJuIGFjdGl2ZUxlYWYudmlldy5lZGl0b3JcbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG5cbiAgc3RhdGljIGdlbmVyYXRlU2NyaXB0KGF0dHJpYnV0ZXMpIHtcbiAgICBsZXQgc2NyaXB0ID0gJ1xcblxcbmBgYGRhdGF2aWV3anNcXG4nXG4gICAgc2NyaXB0ICs9IGBkdi5wYXJhZ3JhcGgoXCJcIikuYXBwZW5kQ2hpbGQoYmFfaGVhdG1hcF9yZW5kZXJlcihcIiR7YXR0cmlidXRlcy5pZH1cIiwge1xcbmBcblxuICAgIE9iamVjdC5lbnRyaWVzKGF0dHJpYnV0ZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgaWYgKGtleSA9PT0gJ2lkJykgcmV0dXJuXG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHNjcmlwdCArPSBgICAnJHtrZXl9JzogJHt2YWx1ZX0sXFxuYFxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgICAgICBzY3JpcHQgKz0gYCAgJyR7a2V5fSc6ICR7dmFsdWV9LFxcbmBcbiAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgY29uc3QganNvbiA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKVxuICAgICAgICBzY3JpcHQgKz0gYCAgJyR7a2V5fSc6IFwiJHtqc29ufVwiLFxcbmBcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICBzY3JpcHQgKz0gYCAgJyR7a2V5fSc6IFwiJHt2YWx1ZX1cIixcXG5gXG4gICAgICB9XG4gICAgfSlcblxuICAgIHNjcmlwdCArPSAnfSkpXFxuJ1xuICAgIHNjcmlwdCArPSAnYGBgXFxuXFxuJ1xuICAgIHJldHVybiBzY3JpcHRcbiAgfVxuXG5cbiAgb3BlblNldHRpbmdzKHBhcmFtcykge1xuICAgIG5ldyBTZXR0aW5ncyh0aGlzLmFwcCwgcGFyYW1zLCBhc3luYyAoYXR0cmlidXRlcykgPT4ge1xuICAgICAgY29uc3Qgc2NyaXB0ID0gTWFpbi5nZW5lcmF0ZVNjcmlwdChhdHRyaWJ1dGVzKVxuICAgICAgY29uc3QgYWN0aXZlRmlsZSA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKClcbiAgICAgIGNvbnN0IGZpbGVDb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZChhY3RpdmVGaWxlKVxuICAgICAgY29uc3QgcGF0dGVybiA9IG5ldyBSZWdFeHAoJ1xcXFxzKmBgYFteYF0qXFxcIicgKyBwYXJhbXMuaWQgKyAnXFxcIlteYF0qYGBgXFxcXHMqJywgJ2dzJylcbiAgICAgIGNvbnN0IG1vZGlmaWVkQ29udGVudCA9IGZpbGVDb250ZW50LnJlcGxhY2UocGF0dGVybiwgc2NyaXB0KVxuICAgICAgYXdhaXQgdGhpcy5hcHAudmF1bHQubW9kaWZ5KGFjdGl2ZUZpbGUsIG1vZGlmaWVkQ29udGVudClcbiAgICB9KS5vcGVuKClcbiAgfVxuXG5cbiAgcmVuZGVyKHBhcmFtcykge1xuICAgIGNvbnN0IGRpdiA9IGNyZWF0ZUVsKCdkaXYnKVxuICAgIGRpdi5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSdcbiAgICBkaXYuaW5uZXJUZXh0ID0gJ0xvYWRpbmcuLi4nXG4gICAgZGl2LnN0eWxlLnRvcCA9ICcwJ1xuICAgIGRpdi5zdHlsZS5tYXJnaW4gPSAnMCBhdXRvJ1xuICAgIGRpdi5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZS1ibG9jaydcblxuICAgIE1haW4udmFsaWRhdGUocGFyYW1zKVxuXG4gICAgLy9UT0RPOiBjbGVhciBjYWNoZSB3aGVuIGRhdGFwcm92aWRlciBhbmQgYXBpIGF1dGggY2hhbmdlZFxuICAgIC8vVE9ETzogc3VwcG9ydCBtb3JlIGFwaXNcblxuICAgIGNvbnN0IGNhY2hlQWxpYXMgPSBwYXJhbXMuaWQgKyBcIi1cIiArIChwYXJhbXNbQ29uZmlnLlVTRV9GQUtFX0RBVEFdID8gJ2Zha2UnIDogJ3RvZ2dsJylcblxuICAgIGlmIChNYWluLmNhY2hlW2NhY2hlQWxpYXNdKSB7XG4gICAgICBDYW52YXMucmVuZGVyKGRpdiwgcGFyYW1zLCBNYWluLmNhY2hlW2NhY2hlQWxpYXNdKVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocGFyYW1zW0NvbmZpZy5VU0VfRkFLRV9EQVRBXSkge1xuICAgICAgICBGYWtlLmZldGNoKHBhcmFtcywgKGRhdGEpID0+IHtcbiAgICAgICAgICBNYWluLmNhY2hlW2NhY2hlQWxpYXNdID0gZGF0YVxuICAgICAgICAgIENhbnZhcy5yZW5kZXIoZGl2LCBwYXJhbXMsIGRhdGEpXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBUb2dnbC5mZXRjaChwYXJhbXMsIChkYXRhKSA9PiB7XG4gICAgICAgICAgTWFpbi5jYWNoZVtjYWNoZUFsaWFzXSA9IGRhdGFcbiAgICAgICAgICBDYW52YXMucmVuZGVyKGRpdiwgcGFyYW1zLCBkYXRhKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cblxuICAgIGRpdi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIHRoaXMub3BlblNldHRpbmdzKHBhcmFtcylcbiAgICB9KVxuXG5cbiAgICByZXR1cm4gZGl2XG4gIH1cblxuXG4gIHN0YXRpYyB2YWxpZGF0ZShwYXJhbXMpIHtcbiAgICBpZiAoIXBhcmFtc1tDb25maWcuWUVBUl0gfHwgcGFyYW1zW0NvbmZpZy5ZRUFSXSA8IDIwMDAgfHwgcGFyYW1zW0NvbmZpZy5ZRUFSXSA+IDIxMDApIHtcbiAgICAgIENhbnZhcy5zZXRFcnJvcihQaHJhc2VzLkVSUk9SX0lOVkFMSURfWUVBUilcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIENhbnZhcy5jbGVhckVycm9yKClcbiAgfVxufVxuIiwgImltcG9ydCB7QXBwLCBNb2RhbCwgU2V0dGluZywgVGV4dENvbXBvbmVudCwgVmFsdWVDb21wb25lbnR9IGZyb20gJ29ic2lkaWFuJ1xuaW1wb3J0IHtEZXNjcmlwdGlvbnMsIENvbmZpZywgSW50ZW5zaXR5Q29sb3JzLCBQaHJhc2VzfSBmcm9tICcuL0NvbnN0cydcbmltcG9ydCB7RGFyaywgTGlnaHQsIE1pbmltYWwsIFZpdmlkfSBmcm9tICcuL1RoZW1lcydcbmltcG9ydCB7Q2FudmFzfSBmcm9tICcuL0NhbnZhcydcbmltcG9ydCBNYWluIGZyb20gJy4vTWFpbidcblxuZXhwb3J0IGNsYXNzIFNldHRpbmdzIGV4dGVuZHMgTW9kYWwge1xuICB0YWJDb250YWluZXI6IEhUTUxFbGVtZW50XG4gIHRhYkNvbnRlbnRDb250YWluZXI6IEhUTUxFbGVtZW50XG4gIHRhYnNDb250ZW50OiBIVE1MRWxlbWVudFtdID0gW11cbiAgdGFic05hbWVzOiBzdHJpbmdbXSA9IFtcIlF1ZXJ5XCIsIFwiU3R5bGVcIiwgXCJCaWxsYWJsZVwiLCBcIlN0YXRzXCIsIFwiRG9uYXRlXCJdXG4gIGNvbmZpZzogYW55XG4gIG9uU3VibWl0OiAocmVzdWx0KSA9PiB2b2lkXG4gIHN0YXRpYyBzZXR0aW5nc01hcCA9IHt9XG4gIHN0YXRpYyBjb21wb25lbnRNYXAgPSB7fVxuXG5cbiAgY29uc3RydWN0b3IoYXBwOiBBcHAsIGNvbmZpZywgb25TdWJtaXQ6IChyZXN1bHQpID0+IHZvaWQpIHtcbiAgICBzdXBlcihhcHApXG4gICAgdGhpcy5jb25maWcgPSBjb25maWdcbiAgICB0aGlzLm9uU3VibWl0ID0gb25TdWJtaXRcbiAgfVxuXG5cbiAgb25PcGVuKCkge1xuICAgIGNvbnN0IHRoYXQgPSB0aGlzXG4gICAgY29uc3QgeyBjb250YWluZXJFbCwgY29udGVudEVsIH0gPSB0aGlzO1xuXG4gICAgY29udGFpbmVyRWwuYWRkQ2xhc3MoJ2NsaGMnKTtcblxuICAgIGNvbnN0IGhlYWRlciA9IHRoaXMudGl0bGVFbDtcbiAgICBoZWFkZXIuaW5uZXJIVE1MID0gUGhyYXNlcy5TRVRUSU5HU19USVRMRVxuXG4gICAgLy8gY29uc3QgaGVhZGVyRGVzY3JpcHRpb24gPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbChcInBcIik7XG4gICAgLy8gaGVhZGVyRGVzY3JpcHRpb24uaW5uZXJIVE1MID0gUGhyYXNlcy5TRVRUSU5HU19ERVNDUklQVElPTlxuXG4gICAgbGV0IHBhcmFtcyA9IHt9XG5cbiAgICBPYmplY3QuZW50cmllcyh0aGlzLmNvbmZpZykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICBwYXJhbXNba2V5XSA9IHZhbHVlXG4gICAgfSlcblxuICAgIHRoaXMudGFiQ29udGFpbmVyID0gY29udGVudEVsLmNyZWF0ZURpdih7IGNsczogJ3RhYnMnIH0pO1xuICAgIHRoaXMudGFiQ29udGVudENvbnRhaW5lciA9IGNvbnRlbnRFbC5jcmVhdGVEaXYoeyBjbHM6ICd0YWItY29udGVudCcgfSk7XG5cbiAgICBmb3IgKGxldCBpPTA7IGk8dGhpcy50YWJzTmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHRhYiA9IHRoaXMudGFiQ29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6IHRoaXMudGFic05hbWVzW2ldIH0pO1xuICAgICAgdGFiLm9uY2xpY2sgPSAoKSA9PiB0aGlzLnNob3dUYWIoaSk7XG4gICAgICB0aGlzLnRhYnNDb250ZW50LnB1c2godGhpcy50YWJDb250ZW50Q29udGFpbmVyLmNyZWF0ZURpdigpKVxuICAgIH1cblxuICAgIGxldCB0YWJRdWVyeSA9IHRoaXMudGFic0NvbnRlbnRbMF1cbiAgICBsZXQgdGFiU3R5bGUgPSB0aGlzLnRhYnNDb250ZW50WzFdXG4gICAgbGV0IHRhYkJpbGxhYmxlID0gdGhpcy50YWJzQ29udGVudFsyXVxuICAgIGxldCB0YWJTdGF0cyA9IHRoaXMudGFic0NvbnRlbnRbM11cbiAgICBsZXQgdGFiRG9uYXRpb24gPSB0aGlzLnRhYnNDb250ZW50WzRdXG5cbiAgICBmdW5jdGlvbiBhZGQodGFiLCB0eXBlLCBuYW1lLCBvcHRpb25zID0gbnVsbCwgb25DaGFuZ2UgPSBudWxsKSB7XG4gICAgICBjb25zdCBrZXkgPSBuYW1lXG4gICAgICBjb25zdCBzZXR0aW5nID0gbmV3IFNldHRpbmcodGFiKS5zZXREZXNjKERlc2NyaXB0aW9uc1trZXldID8/ICcnKVxuXG4gICAgICBjb25zdCBjYWxsYmFjayA9IChjb250cm9sKSA9PiB7XG4gICAgICAgIFNldHRpbmdzLmNvbXBvbmVudE1hcFtrZXldID0gY29udHJvbFxuXG4gICAgICAgIGlmICh0eXBlLmluY2x1ZGVzKFwic2VsZWN0XCIpKSB7XG4gICAgICAgICAgY29udHJvbC5hZGRPcHRpb25zKG9wdGlvbnMpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgIGNvbnRyb2wuc2V0VmFsdWUoJycgKyBwYXJhbXNba2V5XSlcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlLmluY2x1ZGVzKFwiYXJyYXlcIikpIHtcbiAgICAgICAgICBjb250cm9sLnNldFZhbHVlKEpTT04ucGFyc2UocGFyYW1zW2tleV0gPz8gJ1tdJykuam9pbihcIiwgXCIpKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnRyb2wuc2V0VmFsdWUocGFyYW1zW2tleV0pXG4gICAgICAgIH1cblxuICAgICAgICBjb250cm9sLnVwZGF0ZVZhbHVlID0gKHZhbHVlKSA9PiB7XG4gICAgICAgICAgY29udHJvbC5zZXRWYWx1ZSh2YWx1ZSlcbiAgICAgICAgICBjb250cm9sLnVwZGF0ZVZhbHVlQ29yZSh2YWx1ZSlcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRyb2wudXBkYXRlVmFsdWVDb3JlID0gKHZhbHVlKSA9PiB7XG4gICAgICAgICAgQ2FudmFzLmNsZWFyRXJyb3IoKVxuXG4gICAgICAgICAgaWYgKGtleSA9PT0gQ29uZmlnLlRPR0dMX0FQSV9BVVRIIHx8XG4gICAgICAgICAgICBrZXkgPT09IENvbmZpZy5UT0dHTF9XT1JLU1BBQ0VfSUQgfHxcbiAgICAgICAgICAgIGtleSA9PT0gQ29uZmlnLlVTRV9GQUtFX0RBVEEgfHxcbiAgICAgICAgICAgIGtleSA9PT0gQ29uZmlnLllFQVIgfHxcbiAgICAgICAgICAgIGtleSA9PT0gQ29uZmlnLlRPR0dMX1BST0pFQ1RfSURTIHx8XG4gICAgICAgICAgICBrZXkgPT09IENvbmZpZy5PRkZfREFZU1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgTWFpbi5jbGVhckNhY2hlKClcbiAgICAgICAgICB9XG5cblxuICAgICAgICAgIGlmICh0eXBlID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICBwYXJhbXNba2V5XSA9IHBhcnNlSW50KHZhbHVlKVxuICAgICAgICAgIH0gZWxzZSBpZiAodHlwZS5pbmNsdWRlcyhcImFycmF5XCIpKSB7XG4gICAgICAgICAgICBwYXJhbXNba2V5XSA9IGBbJHt2YWx1ZS5zcGxpdCgnLCcpLm1hcChpdGVtID0+IGl0ZW0udHJpbSgpKS5qb2luKCcsJyl9XWBcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyYW1zW2tleV0gPSB2YWx1ZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIE1haW4udmFsaWRhdGUocGFyYW1zKVxuICAgICAgICAgIGlmIChvbkNoYW5nZSkgb25DaGFuZ2UodmFsdWUpXG4gICAgICAgICAgdGhhdC5vblN1Ym1pdChwYXJhbXMpXG4gICAgICAgIH1cblxuICAgICAgICBjb250cm9sLm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgIGNvbnRyb2wudXBkYXRlVmFsdWVDb3JlKHZhbHVlKVxuICAgICAgICB9KVxuXG4gICAgICAgIGlmICh0eXBlLmluY2x1ZGVzKFwibG9uZ1wiKSkge1xuICAgICAgICAgIGNvbnRyb2wuaW5wdXRFbC5zdHlsZS53aWR0aCA9IFwiNjUlXCJcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZSA9PT0gXCJjaGVja1wiKSB7XG4gICAgICAgIHNldHRpbmcuYWRkVG9nZ2xlKGNhbGxiYWNrKVxuICAgICAgfSBlbHNlIGlmICh0eXBlLmluY2x1ZGVzKCdzZWxlY3QnKSkge1xuICAgICAgICBzZXR0aW5nLmFkZERyb3Bkb3duKGNhbGxiYWNrKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0dGluZy5hZGRUZXh0KGNhbGxiYWNrKVxuICAgICAgfVxuXG4gICAgICBjb25zdCBkZXNjRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgZGVzY0VsLnRleHRDb250ZW50ID0gbmFtZTtcbiAgICAgIHNldHRpbmcuY29udHJvbEVsLmluc2VydEJlZm9yZShkZXNjRWwsIHNldHRpbmcuY29udHJvbEVsLmZpcnN0Q2hpbGQpO1xuXG4gICAgICBTZXR0aW5ncy5zZXR0aW5nc01hcFtrZXldID0gc2V0dGluZ1xuICAgICAgcmV0dXJuIHNldHRpbmdcbiAgICB9XG5cbiAgICBhZGQodGFiUXVlcnksIFwibG9uZy10ZXh0XCIsIENvbmZpZy5UT0dHTF9BUElfQVVUSClcbiAgICBhZGQodGFiUXVlcnksIFwibnVtYmVyXCIsIENvbmZpZy5UT0dHTF9XT1JLU1BBQ0VfSUQpXG4gICAgYWRkKHRhYlF1ZXJ5LCBcImNoZWNrXCIsIENvbmZpZy5VU0VfRkFLRV9EQVRBKVxuICAgIGFkZCh0YWJRdWVyeSwgXCJudW1iZXJcIiwgQ29uZmlnLllFQVIpXG4gICAgYWRkKHRhYlF1ZXJ5LCBcImxvbmctYXJyYXlcIiwgQ29uZmlnLlRPR0dMX1BST0pFQ1RfSURTKVxuICAgIGFkZCh0YWJRdWVyeSwgXCJhcnJheVwiLCBDb25maWcuT0ZGX0RBWVMpXG4gICAgYWRkKHRhYlF1ZXJ5LCBcInNlbGVjdFwiLCBDb25maWcuSU5URU5TSVRZX0NPTE9SLCBJbnRlbnNpdHlDb2xvcnMpXG5cbiAgICBmdW5jdGlvbiBhcHBseVRoZW1lKHRoZW1lKSB7XG4gICAgICBPYmplY3QuZW50cmllcyh0aGVtZSkuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgIFNldHRpbmdzLmNvbXBvbmVudE1hcFtrZXldLnVwZGF0ZVZhbHVlKHZhbHVlKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBhZGQodGFiU3R5bGUsIFwic2VsZWN0XCIsIENvbmZpZy5USEVNRSwge1xuICAgICAgZGFyazogJ0RhcmsnLFxuICAgICAgbGlnaHQ6ICdMaWdodCcsXG4gICAgICB2aXZpZDogJ1ZpdmlkJyxcbiAgICAgIG1pbmltYWw6ICdNaW5pbWFsJyxcbiAgICB9LCAodmFsdWUpID0+IHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gJ2RhcmsnKSB7XG4gICAgICAgIGFwcGx5VGhlbWUoRGFyaylcbiAgICAgIH0gaWYgKHZhbHVlID09PSAnbGlnaHQnKSB7XG4gICAgICAgIGFwcGx5VGhlbWUoTGlnaHQpXG4gICAgICB9IGlmICh2YWx1ZSA9PT0gJ3ZpdmlkJykge1xuICAgICAgICBhcHBseVRoZW1lKFZpdmlkKVxuICAgICAgfSBpZiAodmFsdWUgPT09ICdtaW5pbWFsJykge1xuICAgICAgICBhcHBseVRoZW1lKE1pbmltYWwpXG4gICAgICB9XG4gICAgfSlcblxuICAgIGFkZCh0YWJTdHlsZSwgXCJsb25nLXRleHRcIiwgQ29uZmlnLkZPTlQpXG4gICAgYWRkKHRhYlN0eWxlLCBcIm51bWJlclwiLCBDb25maWcuRk9OVF9TSVpFKVxuXG4gICAgYWRkKHRhYlN0eWxlLCBcImxvbmctdGV4dFwiLCBDb25maWcuQ0FMRU5EQVJfQkFDS0dST1VORClcbiAgICBhZGQodGFiU3R5bGUsIFwiY29sb3JcIiwgQ29uZmlnLkNBTEVOREFSX1RFWFRfQ09MT1IpXG4gICAgYWRkKHRhYlN0eWxlLCBcImNvbG9yXCIsIENvbmZpZy5DQUxFTkRBUl9CT1JERVJfQ09MT1IpXG4gICAgYWRkKHRhYlN0eWxlLCBcIm51bWJlclwiLCBDb25maWcuQ0FMRU5EQVJfQk9SREVSX1JBRElVUylcbiAgICBhZGQodGFiU3R5bGUsIFwibnVtYmVyXCIsIENvbmZpZy5DQUxFTkRBUl9QQURESU5HKVxuXG4gICAgYWRkKHRhYlN0eWxlLCBcImNvbG9yXCIsIENvbmZpZy5OT1JNQUxfREFZX0JBQ0tHUk9VTkQpXG4gICAgYWRkKHRhYlN0eWxlLCBcImNvbG9yXCIsIENvbmZpZy5PRkZfREFZX0JBQ0tHUk9VTkQpXG5cbiAgICBhZGQodGFiU3R5bGUsIFwiY29sb3JcIiwgQ29uZmlnLlRPT0xUSVBfQkFDS0dST1VORClcbiAgICBhZGQodGFiU3R5bGUsIFwiY29sb3JcIiwgQ29uZmlnLlRPT0xUSVBfVEVYVF9DT0xPUilcblxuICAgIGFkZCh0YWJTdHlsZSwgXCJjb2xvclwiLCBDb25maWcuU1RBVElTVElDU19DT0xPUilcbiAgICBhZGQodGFiU3R5bGUsIFwiY29sb3JcIiwgQ29uZmlnLkJJTExBQkxFX1JFUE9SVF9DT0xPUilcblxuICAgIGFkZCh0YWJTdHlsZSwgXCJudW1iZXJcIiwgQ29uZmlnLkNFTExfU0laRSlcbiAgICBhZGQodGFiU3R5bGUsIFwibnVtYmVyXCIsIENvbmZpZy5MSU5FX0hFSUdIVClcblxuICAgIGFkZCh0YWJCaWxsYWJsZSwgXCJudW1iZXJcIiwgQ29uZmlnLlBBWUVEX0hPVVJTKVxuICAgIGFkZCh0YWJCaWxsYWJsZSwgXCJudW1iZXJcIiwgQ29uZmlnLkhPVVJMWV9SQVRFKVxuICAgIGFkZCh0YWJCaWxsYWJsZSwgXCJ0ZXh0XCIsIENvbmZpZy5IT1VSTFlfUkFURV9DVVJSRU5DWSlcbiAgICBhZGQodGFiQmlsbGFibGUsIFwibnVtYmVyXCIsIENvbmZpZy5DT05WRVJTSU9OX0ZFRSlcbiAgICBhZGQodGFiQmlsbGFibGUsIFwidGV4dFwiLCBDb25maWcuQ09OVkVSU0lPTl9DVVJSRU5DWSlcblxuICAgIGFkZCh0YWJTdGF0cywgXCJjaGVja1wiLCBDb25maWcuU0hPV19CSUxMQUJMRV9TVEFUUylcbiAgICBhZGQodGFiU3RhdHMsIFwiY2hlY2tcIiwgQ29uZmlnLlNIT1dfR0VORVJBTF9TVEFUUylcbiAgICBhZGQodGFiU3RhdHMsIFwiY2hlY2tcIiwgQ29uZmlnLlNIT1dfU1RSRUFLU19TVEFUUylcblxuICAgIHRoaXMuc2hvd1RhYigwKTtcblxuICAgIHRoaXMubWFrZU1vdmFibGUodGhpcy5tb2RhbEVsLCBoZWFkZXIpO1xuICB9XG5cblxuICBtYWtlTW92YWJsZShtb2RhbDogSFRNTEVsZW1lbnQsIGhlYWRlcjogSFRNTEVsZW1lbnQpIHtcbiAgICBsZXQgaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgIGxldCBzdGFydFggPSAwLCBzdGFydFkgPSAwLCBvZmZzZXRYID0gMCwgb2Zmc2V0WSA9IDA7XG5cbiAgICBoZWFkZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKGUpID0+IHtcbiAgICAgIGlzRHJhZ2dpbmcgPSB0cnVlO1xuXG4gICAgICBvZmZzZXRYID0gbW9kYWwub2Zmc2V0TGVmdDtcbiAgICAgIG9mZnNldFkgPSBtb2RhbC5vZmZzZXRUb3A7XG4gICAgICBzdGFydFggPSBlLmNsaWVudFg7XG4gICAgICBzdGFydFkgPSBlLmNsaWVudFk7XG5cbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uTW91c2VNb3ZlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBvbk1vdXNlVXApO1xuICAgIH0pO1xuXG4gICAgY29uc3Qgb25Nb3VzZU1vdmUgPSAoZTogTW91c2VFdmVudCkgPT4ge1xuICAgICAgaWYgKCFpc0RyYWdnaW5nKSByZXR1cm47XG5cbiAgICAgIGNvbnN0IG5ld0xlZnQgPSBvZmZzZXRYICsgKGUuY2xpZW50WCAtIHN0YXJ0WCk7XG4gICAgICBjb25zdCBuZXdUb3AgPSBvZmZzZXRZICsgKGUuY2xpZW50WSAtIHN0YXJ0WSk7XG5cbiAgICAgIG1vZGFsLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgIG1vZGFsLnN0eWxlLmxlZnQgPSBgJHtuZXdMZWZ0fXB4YDtcbiAgICAgIG1vZGFsLnN0eWxlLnRvcCA9IGAke25ld1RvcH1weGA7XG4gICAgfTtcblxuICAgIGNvbnN0IG9uTW91c2VVcCA9ICgpID0+IHtcbiAgICAgIGlzRHJhZ2dpbmcgPSBmYWxzZTtcblxuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Nb3VzZU1vdmUpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG9uTW91c2VVcCk7XG4gICAgfTtcbiAgfVxuXG5cbiAgc2hvd1RhYihpbmRleDogbnVtYmVyKSB7XG4gICAgdGhpcy50YWJzQ29udGVudC5mb3JFYWNoKHRhYkNvbnRlbnQgPT4ge1xuICAgICAgdGFiQ29udGVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgdGFiQ29udGVudC5zdHlsZS5oZWlnaHQgPSAnMCc7XG4gICAgICB0YWJDb250ZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgIH0pXG5cbiAgICBmb3IgKGxldCBpPTA7IGk8dGhpcy50YWJzTmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMudGFiQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoYGJ1dHRvbjpudGgtY2hpbGQoJHtpKzF9KWApPy5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICB9XG5cbiAgICB0aGlzLnRhYkNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKGBidXR0b246bnRoLWNoaWxkKCR7aW5kZXgrMX0pYCk/LmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuXG4gICAgbGV0IGN1cnJlbnRUYWIgPSB0aGlzLnRhYnNDb250ZW50W2luZGV4XVxuICAgIGN1cnJlbnRUYWIuc3R5bGUuZGlzcGxheSA9ICdibG9jaydcbiAgICBjdXJyZW50VGFiLnN0eWxlLmhlaWdodCA9ICczMDBweCdcbiAgICBjdXJyZW50VGFiLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpXG4gIH1cblxuXG4gIG9uQ2xvc2UoKSB7XG4gICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XG4gICAgY29udGVudEVsLmVtcHR5KCk7XG4gIH1cbn1cbiIsICJleHBvcnQgZW51bSBDb25maWcge1xuICBUT0dHTF9BUElfQVVUSCA9ICdUb2dnbCBBUEkgQXV0aCcsXG4gIFRPR0dMX1dPUktTUEFDRV9JRCA9ICdUb2dnbCBXb3Jrc3BhY2UgSUQnLFxuICBUT0dHTF9QUk9KRUNUX0lEUyA9ICdUb2dnbCBQcm9qZWN0IElEcycsXG5cbiAgVVNFX0ZBS0VfREFUQSA9ICdVc2UgRmFrZSBEYXRhJyxcbiAgWUVBUiA9ICdZZWFyJyxcblxuICBPRkZfREFZUyA9ICdPZmYgRGF5cycsXG5cbiAgVEhFTUUgPSAnVGhlbWUnLFxuXG4gIEZPTlQgPSAnRm9udCcsXG4gIEZPTlRfU0laRSA9ICdGb250IFNpemUnLFxuXG4gIENBTEVOREFSX0JBQ0tHUk9VTkQgPSAnQ2FsZW5kYXIgQmFja2dyb3VuZCcsXG4gIENBTEVOREFSX1RFWFRfQ09MT1IgPSAnQ2FsZW5kYXIgVGV4dCBDb2xvcicsXG4gIENBTEVOREFSX0JPUkRFUl9DT0xPUiA9ICdDYWxlbmRhciBCb3JkZXIgQ29sb3InLFxuICBDQUxFTkRBUl9CT1JERVJfUkFESVVTID0gJ0NhbGVuZGFyIEJvcmRlciBSYWRpdXMnLFxuICBDQUxFTkRBUl9QQURESU5HID0gJ0NhbGVuZGFyIFBhZGRpbmcnLFxuXG4gIFRPT0xUSVBfQkFDS0dST1VORCA9ICdUb29sdGlwIEJhY2tncm91bmQnLFxuICBUT09MVElQX1RFWFRfQ09MT1IgPSAnVG9vbHRpcCBUZXh0IENvbG9yJyxcblxuICBOT1JNQUxfREFZX0JBQ0tHUk9VTkQgPSAnTm9ybWFsIERheSBCYWNrZ3JvdW5kJyxcbiAgT0ZGX0RBWV9CQUNLR1JPVU5EID0gJ09mZiBEYXkgQmFja2dyb3VuZCcsXG4gIElOVEVOU0lUWV9DT0xPUiA9ICdJbnRlbnNpdHkgQ29sb3InLFxuXG4gIFNUQVRJU1RJQ1NfQ09MT1IgPSAnU3RhdGlzdGljcyBDb2xvcicsXG4gIEJJTExBQkxFX1JFUE9SVF9DT0xPUiA9ICdCaWxsYWJsZSBSZXBvcnQgQ29sb3InLFxuXG4gIFBBWUVEX0hPVVJTID0gJ1BheWVkIEhvdXJzJyxcbiAgSE9VUkxZX1JBVEUgPSAnSG91cmx5IFJhdGUnLFxuICBIT1VSTFlfUkFURV9DVVJSRU5DWSA9ICdIb3VybHkgUmF0ZSBDdXJyZW5jeScsXG4gIENPTlZFUlNJT05fRkVFID0gJ0NvbnZlcnNpb24gRmVlJyxcbiAgQ09OVkVSU0lPTl9DVVJSRU5DWSA9ICdDb252ZXJzaW9uIEN1cnJlbmN5JyxcblxuICBDRUxMX1NJWkUgPSAnQ2VsbCBTaXplJyxcblxuICBMSU5FX0hFSUdIVCA9ICdMaW5lIEhlaWdodCcsXG5cbiAgU0hPV19HRU5FUkFMX1NUQVRTID0gJ1Nob3cgR2VuZXJhbCBTdGF0aXN0aWNzJyxcbiAgU0hPV19TVFJFQUtTX1NUQVRTID0gJ1Nob3cgU3RyZWFrcyBTdGF0aXN0aWNzJyxcbiAgU0hPV19CSUxMQUJMRV9TVEFUUyA9ICdTaG93IEJpbGxhYmxlIEluZm9ybWF0aW9uJyxcbn1cblxuXG5leHBvcnQgZW51bSBQaHJhc2VzIHtcbiAgU0VUVElOR1NfVElUTEUgPSAnU2V0dGluZ3MnLFxuICBTRVRUSU5HU19ERVNDUklQVElPTiA9ICcnLFxuXG4gIEFWRVJBR0UgPSAnQXZlcmFnZScsXG4gIERFViA9ICdEZXZpYXRpb24nLFxuICBNSU4gPSAnTWluaW11bScsXG4gIE1BWCA9ICdNYXhpbXVtJyxcbiAgU1VNID0gJ1N1bW1hcnknLFxuXG4gIFBBWUVEID0gJ1BheWVkJyxcbiAgUEFZQUJMRSA9ICdQYXlhYmxlJyxcbiAgUkVNQUlOUyA9ICdSZW1haW5zJyxcbiAgQklMTEFCTEUgPSAnQmlsbGFibGUnLFxuXG4gIFNUUkVBS19DT1VOVCA9ICdTdHJlYWtzJyxcbiAgQVZFUkFHRV9TVFJFQUsgPSAnQXZlcmFnZScsXG4gIExPTkdFU1RfU1RSRUFLID0gJ0xvbmdlc3QnLFxuXG4gIEVSUk9SX0lOVkFMSURfVE9HR0xfQVBJX0FVVEggPSBcIkludmFsaWQgb3IgTWlzc2luZyBUb2dnbCBBUEkgVG9rZW5cXG5cXG5UaGUgcHJvdmlkZWQgVG9nZ2wgQVBJIHRva2VuIGlzIGVpdGhlciBtaXNzaW5nIG9yIGludmFsaWQuXFxuUGxlYXNlIGVuc3VyZSB0aGUgZm9sbG93aW5nOlxcbiAgMS4gRW50ZXIgYSB2YWxpZCBBUEkgdG9rZW4gZnJvbSB5b3VyIFRvZ2dsIGFjY291bnQuXFxuICAyLiBWZXJpZnkgdGhlIHRva2VuIGxlbmd0aCBhbmQgZW5zdXJlIGl0IG1hdGNoZXMgdGhlIHJlcXVpcmVkIGZvcm1hdC5cXG5cXG5Zb3UgY2FuIHJldHJpZXZlIHlvdXIgQVBJIHRva2VuIGZyb20geW91ciBUb2dnbCBQcm9maWxlIFNldHRpbmdzLlxcbkZvciBmdXJ0aGVyIGFzc2lzdGFuY2UsIHJlZmVyIHRvIHRoZSBUb2dnbCBBUEkgZG9jdW1lbnRhdGlvbi5cIixcbiAgRVJST1JfSU5WQUxJRF9UT0dHTF9XT1JLU1BBQ0VfSUQgPSBcIkludmFsaWQgV29ya3NwYWNlIElEXFxuXFxuVGhlIHByb3ZpZGVkIFRvZ2dsIFdvcmtzcGFjZSBJRCBpcyBpbnZhbGlkLiBQbGVhc2UgZW5zdXJlIHRoZSBmb2xsb3dpbmc6XFxuICAxLiBFbnRlciB0aGUgY29ycmVjdCBXb3Jrc3BhY2UgSUQgYXNzb2NpYXRlZCB3aXRoIHlvdXIgVG9nZ2wgYWNjb3VudC5cXG4gIDIuIFZlcmlmeSB0aGUgSUQgbWF0Y2hlcyB0aGUgZm9ybWF0IGV4cGVjdGVkIGJ5IHRoZSBUb2dnbCBBUEkuXFxuXFxuWW91IGNhbiBmaW5kIHlvdXIgV29ya3NwYWNlIElEIGluIHlvdXIgVG9nZ2wgV29ya3NwYWNlIFNldHRpbmdzLlxcbkZvciBmdXJ0aGVyIGRldGFpbHMsIGNvbnN1bHQgdGhlIFRvZ2dsIEFQSSBkb2N1bWVudGF0aW9uLlwiLFxuICBFUlJPUl9JTlZBTElEX1lFQVIgPSBcIkludmFsaWQgWWVhclxcblxcblRoZSBwcm92aWRlZCB5ZWFyIGlzIGludmFsaWQuIFBsZWFzZSBlbnN1cmUgdGhlIGZvbGxvd2luZzpcXG4gIDEuIEVudGVyIGEgdmFsaWQgeWVhciBpbiB0aGUgY29ycmVjdCBmb3JtYXQgKGUuZy4sIDIwMjMpLlxcbiAgMi4gRW5zdXJlIHRoZSB5ZWFyIGlzIHdpdGhpbiBhIHJlYXNvbmFibGUgcmFuZ2UgKGUuZy4sIDIwMDAtMjEwMCkuXFxuXFxuVGhpcyBmaWVsZCBpcyByZXF1aXJlZCB0byBnZW5lcmF0ZSB0aGUgaGVhdG1hcCBjYWxlbmRhci5cIixcbn1cblxuXG5leHBvcnQgY29uc3QgRGVzY3JpcHRpb25zID0ge1xuICBbQ29uZmlnLlRPR0dMX0FQSV9BVVRIXTogJ0F1dGhlbnRpY2F0ZSB3aXRoIFRvZ2dsIGJ5IHByb3ZpZGluZyB5b3VyIEFQSSB0b2tlbiB0byBmZXRjaCB0aW1lIHRyYWNraW5nIGRhdGEuIFJldHJpZXZlIHlvdXIgdG9rZW4gZnJvbSBUb2dnbCBQcm9maWxlIFNldHRpbmdzLiBMZWF2ZSBibGFuayB0byB1c2UgZmFrZSBkYXRhIGluc3RlYWQuJyxcbiAgW0NvbmZpZy5UT0dHTF9XT1JLU1BBQ0VfSURdOiAnRW50ZXIgdGhlIFdvcmtzcGFjZSBJRCBhc3NvY2lhdGVkIHdpdGggeW91ciBUb2dnbCBhY2NvdW50IHRvIGZldGNoIGRhdGEgZm9yIHRoZSBjb3JyZWN0IHdvcmtzcGFjZS4gRmluZCBpdCBpbiB5b3VyIFRvZ2dsIFdvcmtzcGFjZSBTZXR0aW5ncy4nLFxuICBbQ29uZmlnLlRPR0dMX1BST0pFQ1RfSURTXTogJ0VudGVyIHNwZWNpZmljIFRvZ2dsIFByb2plY3QgSURzIChjb21tYS1zZXBhcmF0ZWQpIHRvIGZpbHRlciBkYXRhIGZvciBzZWxlY3RlZCBwcm9qZWN0cy4gTGVhdmUgYmxhbmsgdG8gaW5jbHVkZSBhbGwgcHJvamVjdHMuJyxcbiAgW0NvbmZpZy5VU0VfRkFLRV9EQVRBXTogJ0VuYWJsZSB0aGlzIG9wdGlvbiB0byBnZW5lcmF0ZSBhbmQgdXNlIGZha2UgdGltZSB0cmFja2luZyBkYXRhIGluc3RlYWQgb2YgZmV0Y2hpbmcgZGF0YSBmcm9tIFRvZ2dsLiBVc2VmdWwgZm9yIHRlc3Rpbmcgb3IgZGVtb25zdHJhdGlvbnMuJyxcbiAgW0NvbmZpZy5ZRUFSXTogJ1NwZWNpZnkgdGhlIHllYXIgZm9yIHdoaWNoIHRoZSBoZWF0bWFwIGNhbGVuZGFyIHdpbGwgYmUgZ2VuZXJhdGVkLiBNdXN0IGJlIGluIFlZWVkgZm9ybWF0IChlLmcuLCAyMDIzKS4nLFxuICBbQ29uZmlnLk9GRl9EQVlTXTogJ1NwZWNpZnkgZGF5cyB5b3UgZG9uXHUyMDE5dCBleHBlY3QgdG8gbG9nIHRpbWUgKGUuZy4sIHdlZWtlbmRzKS4gVXNlIG51bWJlcnM6IFN1biA9IDAsIE1vbiA9IDEsIFR1ZSA9IDIsIFdlZCA9IDMsIFRodSA9IDQsIEZyaSA9IDUsIFNhdCA9IDYuIFNlcGFyYXRlIG11bHRpcGxlIGRheXMgd2l0aCBjb21tYXMgKGUuZy4sIDAsNiBmb3IgU3VuIGFuZCBTYXQpLiBPZmYgZGF5cyBkbyBub3QgYWZmZWN0IHN0cmVhayBsZW5ndGhzLicsXG4gIFtDb25maWcuVEhFTUVdOiAnU2VsZWN0IGEgdGhlbWUgdG8gY3VzdG9taXplIHRoZSBoZWF0bWFwIGNhbGVuZGFyXHUyMDE5cyBhcHBlYXJhbmNlLiBDaG9vc2luZyBhIHRoZW1lIHdpbGwgYXV0b21hdGljYWxseSB1cGRhdGUgcmVsYXRlZCBzdHlsZSBjb25maWd1cmF0aW9ucywgc3VjaCBhcyBjb2xvcnMgYW5kIGdyYWRpZW50cywgYWZmZWN0aW5nIGhvdyB0aGUgaGVhdG1hcCBpcyBkaXNwbGF5ZWQuJyxcbiAgW0NvbmZpZy5GT05UXTogJ0Nob29zZSB0aGUgZm9udCBzdHlsZSBmb3IgdGhlIGhlYXRtYXAgY2FsZW5kYXIuIFdlIHJlY29tbWVuZCBJb3NldmthIChpbmNsdWRlZCBpbiBwcmVkZWZpbmVkIHRoZW1lcykgZm9yIGl0cyBjbGVhbiBhbmQgbW9kZXJuIGRlc2lnbi4gVGhpcyBhZmZlY3RzIHRoZSB0ZXh0IGRpc3BsYXllZCBpbiB0aGUgY2FsZW5kYXIsIHN1Y2ggYXMgZGF0ZXMgYW5kIGxhYmVscy4nLFxuICBbQ29uZmlnLkZPTlRfU0laRV06ICdTZXQgdGhlIGJhc2UgZm9udCBzaXplIGZvciB0aGUgaGVhdG1hcCBjYWxlbmRhci4gQWRqdXN0aW5nIHRoaXMgdmFsdWUgd2lsbCBwcm9wb3J0aW9uYWxseSBzY2FsZSBvdGhlciB0ZXh0IGVsZW1lbnRzLCBzdWNoIGFzIGxhYmVscyBhbmQgYW5ub3RhdGlvbnMuIFVzZSBhIG51bWJlciAoZS5nLiwgMjQpLicsXG4gIFtDb25maWcuQ0FMRU5EQVJfQkFDS0dST1VORF06ICdTZXQgdGhlIGJhY2tncm91bmQgb2YgdGhlIGhlYXRtYXAgY2FsZW5kYXIuIFVzZSBuYW1lZCBjb2xvcnMgKGUuZy4sIHdoaXRlKSwgaGV4IGNvZGVzIChlLmcuLCAjZmZmMiBmb3Igc2VtaS10cmFuc3BhcmVuY3kpLCBvciBncmFkaWVudHMuIEdyYWRpZW50cyBhcmUgcHJpb3JpdGl6ZWQgaW4gdGhlbWVzLicsXG4gIFtDb25maWcuQ0FMRU5EQVJfVEVYVF9DT0xPUl06ICdEZWZpbmUgdGhlIGNvbG9yIGZvciB0ZXh0IGVsZW1lbnRzLCBpbmNsdWRpbmcgZGF5IG5hbWVzLCBtb250aCBuYW1lcywgYW5kIHRoZSB5ZWFyLiBVc2UgbmFtZWQgY29sb3JzIChlLmcuLCBibGFjaykgb3IgaGV4IGNvZGVzIChlLmcuLCAjMDAwMDAwKS4nLFxuICBbQ29uZmlnLkNBTEVOREFSX0JPUkRFUl9DT0xPUl06ICdDaG9vc2UgdGhlIGNvbG9yIGZvciB0aGUgY2FsZW5kYXJcdTIwMTlzIGJvcmRlci4gVXNlIG5hbWVkIGNvbG9ycyAoZS5nLiwgZ3JheSkgb3IgaGV4IGNvZGVzIChlLmcuLCAjY2NjY2NjKS4nLFxuICBbQ29uZmlnLkNBTEVOREFSX0JPUkRFUl9SQURJVVNdOiAnQWRqdXN0IHRoZSBjb3JuZXIgcmFkaXVzIGZvciB0aGUgY2FsZW5kYXJcdTIwMTlzIGJvcmRlciB0byBjb250cm9sIGl0cyByb3VuZGVkbmVzcy4gVXNlIGEgbnVtYmVyIChlLmcuLCA1KS4nLFxuICBbQ29uZmlnLkNBTEVOREFSX1BBRERJTkddOiAnU2V0IHRoZSBvdXRlciBzcGFjaW5nIGFyb3VuZCB0aGUgZW50aXJlIGNhbGVuZGFyLiBVc2UgYSBudW1iZXIgKGUuZy4sIDEwKSB0byBjb250cm9sIHRoZSBtYXJnaW4gYmV0d2VlbiB0aGUgY2FsZW5kYXIgYW5kIHN1cnJvdW5kaW5nIGVsZW1lbnRzLicsXG4gIFtDb25maWcuVE9PTFRJUF9CQUNLR1JPVU5EXTogJ1NldCB0aGUgYmFja2dyb3VuZCBjb2xvciBmb3IgdG9vbHRpcHMgZGlzcGxheWVkIHdoZW4gaG92ZXJpbmcgb3ZlciBjYWxlbmRhciBjZWxscy4gVXNlIG5hbWVkIGNvbG9ycyAoZS5nLiwgd2hpdGUpLCBoZXggY29kZXMgKGUuZy4sICNmZmZmZmYpLCBvciBncmFkaWVudHMuJyxcbiAgW0NvbmZpZy5UT09MVElQX1RFWFRfQ09MT1JdOiAnRGVmaW5lIHRoZSBjb2xvciBvZiB0aGUgdGV4dCBpbnNpZGUgdG9vbHRpcHMuIFVzZSBuYW1lZCBjb2xvcnMgKGUuZy4sIGJsYWNrKSBvciBoZXggY29kZXMgKGUuZy4sICMwMDAwMDApLicsXG4gIFtDb25maWcuTk9STUFMX0RBWV9CQUNLR1JPVU5EXTogJ1NldCB0aGUgYmFja2dyb3VuZCBjb2xvciBmb3IgcmVndWxhciBkYXlzLiBVc2UgbmFtZWQgY29sb3JzIChlLmcuLCBsaWdodGdyYXkpIG9yIGhleCBjb2RlcyAoZS5nLiwgI2YwZjBmMCkuJyxcbiAgW0NvbmZpZy5PRkZfREFZX0JBQ0tHUk9VTkRdOiAnRGVmaW5lIHRoZSBiYWNrZ3JvdW5kIGNvbG9yIGZvciBvZmYgZGF5cyAoZS5nLiwgd2Vla2VuZHMgb3IgaG9saWRheXMpLiBVc2UgbmFtZWQgY29sb3JzIChlLmcuLCBncmF5KSBvciBoZXggY29kZXMgKGUuZy4sICNjY2NjY2MpLicsXG4gIFtDb25maWcuSU5URU5TSVRZX0NPTE9SXTogJ0Nob29zZSB0aGUgY29sb3IgZ3JhZGllbnQgdXNlZCB0byByZXByZXNlbnQgYWN0aXZpdHkgaW50ZW5zaXR5IGluIHRoZSBoZWF0bWFwLiBVc2UgbmFtZWQgY29sb3JzLCBoZXggY29kZXMsIG9yIGdyYWRpZW50cy4nLFxuICBbQ29uZmlnLlNUQVRJU1RJQ1NfQ09MT1JdOiAnU2V0IHRoZSBjb2xvciBmb3Igc3RhdGlzdGljYWwgZWxlbWVudHMgKGUuZy4sIGF2ZXJhZ2VzIG9yIHRvdGFscykgZGlzcGxheWVkIGluIHRoZSBjYWxlbmRhci4gVXNlIG5hbWVkIGNvbG9ycyBvciBoZXggY29kZXMuJyxcbiAgW0NvbmZpZy5CSUxMQUJMRV9SRVBPUlRfQ09MT1JdOiAnRGVmaW5lIHRoZSBjb2xvciBmb3IgYmlsbGFibGUgaG91cnMgb3IgcmVwb3J0cyBpbiB0aGUgaGVhdG1hcC4gVXNlIG5hbWVkIGNvbG9ycyBvciBoZXggY29kZXMuJyxcbiAgW0NvbmZpZy5QQVlFRF9IT1VSU106ICdFbnRlciB0aGUgdG90YWwgaG91cnMgdGhhdCBoYXZlIGFscmVhZHkgYmVlbiBwYWlkLiBUaGlzIGhlbHBzIHRyYWNrIHJlbWFpbmluZyBiaWxsYWJsZSBob3Vycy4nLFxuICBbQ29uZmlnLkhPVVJMWV9SQVRFXTogJ1NldCB0aGUgaG91cmx5IHJhdGUgdXNlZCBmb3IgY2FsY3VsYXRpbmcgYmlsbGFibGUgYW1vdW50cy4gRW50ZXIgYSBudW1lcmljIHZhbHVlIChlLmcuLCA1MCkuJyxcbiAgW0NvbmZpZy5IT1VSTFlfUkFURV9DVVJSRU5DWV06ICdTcGVjaWZ5IHRoZSBjdXJyZW5jeSBmb3IgdGhlIGhvdXJseSByYXRlIChlLmcuLCBVU0QsIEVVUikuIFRoaXMgZW5zdXJlcyBhY2N1cmF0ZSBiaWxsaW5nIGNhbGN1bGF0aW9ucy4nLFxuICBbQ29uZmlnLkNPTlZFUlNJT05fRkVFXTogJ0VudGVyIGFueSBhZGRpdGlvbmFsIGZlZSBhcHBsaWVkIGR1cmluZyBjdXJyZW5jeSBjb252ZXJzaW9uLiBVc2UgYSBudW1lcmljIHZhbHVlIChlLmcuLCAwLjAyIGZvciAyJSkuJyxcbiAgW0NvbmZpZy5DT05WRVJTSU9OX0NVUlJFTkNZXTogJ1NldCB0aGUgdGFyZ2V0IGN1cnJlbmN5IGZvciBjb252ZXJzaW9uIChlLmcuLCBVU0QgdG8gRVVSKS4gVGhpcyBpcyB1c2VkIGZvciBmaW5hbCBiaWxsaW5nIGNhbGN1bGF0aW9ucy4nLFxuICBbQ29uZmlnLkNFTExfU0laRV06ICdTZXQgdGhlIHNpemUgb2YgZWFjaCBjZWxsLiBBZGp1c3QgdGhpcyB0byBjb250cm9sIHRoZSBvdmVyYWxsIGRpbWVuc2lvbnMgb2YgdGhlIGNhbGVuZGFyLiBVc2UgYSBudW1iZXIgYXJvdW5kIDEwIChlLmcuLCA3IHRvIDE1KS4nLFxuICBbQ29uZmlnLkxJTkVfSEVJR0hUXTogJ0RlZmluZSB0aGUgaGVpZ2h0IG9mIGxpbmVzIGZvciBzdGF0aXN0aWNzLCBiaWxsYWJsZSByZXBvcnRzLCBhbmQgb3RoZXIgdGV4dCBibG9ja3MuIFVzZSBhIG51bWJlciAoZS5nLiwgMjApIGZvciBjb25zaXN0ZW50IHNwYWNpbmcuJyxcbiAgW0NvbmZpZy5TSE9XX0JJTExBQkxFX1NUQVRTXTogJ0VuYWJsZSB0aGlzIG9wdGlvbiB0byBkaXNwbGF5IGJpbGxhYmxlIGluZm9ybWF0aW9uIChlLmcuLCBwYXllZCwgcmVtYWlucykuJyxcbiAgW0NvbmZpZy5TSE9XX0dFTkVSQUxfU1RBVFNdOiAnRW5hYmxlIHRoaXMgb3B0aW9uIHRvIGRpc3BsYXkgZ2VuZXJhbCBzdGF0aXN0aWNzIChlLmcuLCB0b3RhbCBob3VycywgYXZlcmFnZXMpLicsXG4gIFtDb25maWcuU0hPV19TVFJFQUtTX1NUQVRTXTogJ0VuYWJsZSB0aGlzIG9wdGlvbiB0byBkaXNwbGF5IHN0cmVhayBzdGF0aXN0aWNzIChlLmcuLCBsb25nZXN0IHN0cmVhaywgY3VycmVudCBzdHJlYWspLicsXG59O1xuXG5cbmV4cG9ydCBjb25zdCBJbnRlbnNpdHlDb2xvcnMgPSB7XG4gICcjZmYwMDAwJzogJ1JlZCcsXG4gICcjMDBmZjAwJzogJ0dyZWVuJyxcbiAgJyMwMDAwZmYnOiAnQmx1ZScsXG4gICcjZmZmZjAwJzogJ1llbGxvdycsXG4gICcjZmYwMGZmJzogJ01hZ2VudGEnLFxuICAnIzAwZmZmZic6ICdDeWFuJyxcbiAgJyNmZmZmZmYnOiAnV2hpdGUnLFxuICAnI2ZmODgwMCc6ICdPcmFuZ2UnLFxuICAnI2ZmMDA4OCc6ICdQaW5rJyxcbiAgJyM4OGZmMDAnOiAnTGltZScsXG4gICcjMDBmZjg4JzogJ01pbnQnLFxuICAnIzg4MDBmZic6ICdQdXJwbGUnLFxuICAnIzAwODhmZic6ICdBenVyZScsXG59XG5cblxuZXhwb3J0IGNvbnN0IERheXMgPSBbJ1N1bicsICdNb24nLCAnVHVlJywgJ1dlZCcsICdUaHUnLCAnRnJpJywgJ1NhdCddXG4iLCAiaW1wb3J0IHtDb25maWd9IGZyb20gJy4vQ29uc3RzJ1xuXG5leHBvcnQgY29uc3QgR2VuZXJhbCA9IHtcbiAgW0NvbmZpZy5GT05UXTogJ0lvc2V2a2EsIENvdXJpZXIgTmV3LCBtb25vc3BhY2UnLFxuICBbQ29uZmlnLkZPTlRfU0laRV06IDEyLFxuICBbQ29uZmlnLkNBTEVOREFSX0JPUkRFUl9SQURJVVNdOiAxMCxcbiAgW0NvbmZpZy5DQUxFTkRBUl9QQURESU5HXTogMjAsXG4gIFtDb25maWcuQ0VMTF9TSVpFXTogMTAsXG4gIFtDb25maWcuTElORV9IRUlHSFRdOiAxNixcbn1cblxuZXhwb3J0IGNvbnN0IERhcmsgPSB7XG4gIFtDb25maWcuRk9OVF06IEdlbmVyYWxbQ29uZmlnLkZPTlRdLFxuICBbQ29uZmlnLkZPTlRfU0laRV06IEdlbmVyYWxbQ29uZmlnLkZPTlRfU0laRV0sXG4gIFtDb25maWcuQ0FMRU5EQVJfQk9SREVSX1JBRElVU106IEdlbmVyYWxbQ29uZmlnLkNBTEVOREFSX0JPUkRFUl9SQURJVVNdLFxuICBbQ29uZmlnLkNBTEVOREFSX1BBRERJTkddOiBHZW5lcmFsW0NvbmZpZy5DQUxFTkRBUl9QQURESU5HXSxcbiAgW0NvbmZpZy5DRUxMX1NJWkVdOiBHZW5lcmFsW0NvbmZpZy5DRUxMX1NJWkVdLFxuICBbQ29uZmlnLkxJTkVfSEVJR0hUXTogR2VuZXJhbFtDb25maWcuTElORV9IRUlHSFRdLFxuXG4gIFtDb25maWcuQ0FMRU5EQVJfQkFDS0dST1VORF06ICdsaW5lYXItZ3JhZGllbnQodG8gYm90dG9tIHJpZ2h0LCAjMTExLCAjMjcyNzI3KScsXG4gIFtDb25maWcuQ0FMRU5EQVJfVEVYVF9DT0xPUl06ICcjZGRkJyxcbiAgW0NvbmZpZy5DQUxFTkRBUl9CT1JERVJfQ09MT1JdOiAnIzMzMycsXG4gIFtDb25maWcuTk9STUFMX0RBWV9CQUNLR1JPVU5EXTogJyM0NDQnLFxuICBbQ29uZmlnLk9GRl9EQVlfQkFDS0dST1VORF06ICcjMmEyYTJhJyxcbiAgW0NvbmZpZy5TVEFUSVNUSUNTX0NPTE9SXTogJ3doaXRlJyxcbiAgW0NvbmZpZy5CSUxMQUJMRV9SRVBPUlRfQ09MT1JdOiAnd2hpdGUnLFxuICBbQ29uZmlnLlRPT0xUSVBfQkFDS0dST1VORF06ICd3aGl0ZScsXG4gIFtDb25maWcuVE9PTFRJUF9URVhUX0NPTE9SXTogJ2JsYWNrJyxcbn1cblxuZXhwb3J0IGNvbnN0IExpZ2h0ID0ge1xuICBbQ29uZmlnLkZPTlRdOiBHZW5lcmFsW0NvbmZpZy5GT05UXSxcbiAgW0NvbmZpZy5GT05UX1NJWkVdOiBHZW5lcmFsW0NvbmZpZy5GT05UX1NJWkVdLFxuICBbQ29uZmlnLkNBTEVOREFSX0JPUkRFUl9SQURJVVNdOiBHZW5lcmFsW0NvbmZpZy5DQUxFTkRBUl9CT1JERVJfUkFESVVTXSxcbiAgW0NvbmZpZy5DQUxFTkRBUl9QQURESU5HXTogR2VuZXJhbFtDb25maWcuQ0FMRU5EQVJfUEFERElOR10sXG4gIFtDb25maWcuQ0VMTF9TSVpFXTogR2VuZXJhbFtDb25maWcuQ0VMTF9TSVpFXSxcbiAgW0NvbmZpZy5MSU5FX0hFSUdIVF06IEdlbmVyYWxbQ29uZmlnLkxJTkVfSEVJR0hUXSxcblxuICBbQ29uZmlnLkNBTEVOREFSX0JBQ0tHUk9VTkRdOiAnbGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSByaWdodCwgI2VlZSwgI2Y3ZjdmNyknLFxuICBbQ29uZmlnLkNBTEVOREFSX1RFWFRfQ09MT1JdOiAnIzMzMycsXG4gIFtDb25maWcuQ0FMRU5EQVJfQk9SREVSX0NPTE9SXTogJyNkZGQnLFxuICBbQ29uZmlnLk5PUk1BTF9EQVlfQkFDS0dST1VORF06ICcjY2NjJyxcbiAgW0NvbmZpZy5PRkZfREFZX0JBQ0tHUk9VTkRdOiAnI2U0ZTRlNCcsXG4gIFtDb25maWcuU1RBVElTVElDU19DT0xPUl06ICdibGFjaycsXG4gIFtDb25maWcuQklMTEFCTEVfUkVQT1JUX0NPTE9SXTogJ2JsYWNrJyxcbiAgW0NvbmZpZy5UT09MVElQX0JBQ0tHUk9VTkRdOiAnYmxhY2snLFxuICBbQ29uZmlnLlRPT0xUSVBfVEVYVF9DT0xPUl06ICd3aGl0ZScsXG59XG5cbmV4cG9ydCBjb25zdCBWaXZpZCA9IHtcbiAgW0NvbmZpZy5GT05UXTogR2VuZXJhbFtDb25maWcuRk9OVF0sXG4gIFtDb25maWcuRk9OVF9TSVpFXTogR2VuZXJhbFtDb25maWcuRk9OVF9TSVpFXSxcbiAgW0NvbmZpZy5DQUxFTkRBUl9CT1JERVJfUkFESVVTXTogR2VuZXJhbFtDb25maWcuQ0FMRU5EQVJfQk9SREVSX1JBRElVU10sXG4gIFtDb25maWcuQ0FMRU5EQVJfUEFERElOR106IEdlbmVyYWxbQ29uZmlnLkNBTEVOREFSX1BBRERJTkddLFxuICBbQ29uZmlnLkNFTExfU0laRV06IEdlbmVyYWxbQ29uZmlnLkNFTExfU0laRV0sXG4gIFtDb25maWcuTElORV9IRUlHSFRdOiBHZW5lcmFsW0NvbmZpZy5MSU5FX0hFSUdIVF0sXG5cbiAgW0NvbmZpZy5DQUxFTkRBUl9CQUNLR1JPVU5EXTogJ2xpbmVhci1ncmFkaWVudCh0byBib3R0b20gcmlnaHQsICM4MjIsICMyMjgpJyxcbiAgW0NvbmZpZy5DQUxFTkRBUl9URVhUX0NPTE9SXTogJyNjY2MnLFxuICBbQ29uZmlnLkNBTEVOREFSX0JPUkRFUl9DT0xPUl06ICcjODg4JyxcbiAgW0NvbmZpZy5OT1JNQUxfREFZX0JBQ0tHUk9VTkRdOiAnI2ZmZjQnLFxuICBbQ29uZmlnLk9GRl9EQVlfQkFDS0dST1VORF06ICcjZmFhMicsXG4gIFtDb25maWcuU1RBVElTVElDU19DT0xPUl06ICcjZGRmJyxcbiAgW0NvbmZpZy5CSUxMQUJMRV9SRVBPUlRfQ09MT1JdOiAnI2ZmMCcsXG4gIFtDb25maWcuVE9PTFRJUF9CQUNLR1JPVU5EXTogJyMyMjhjJyxcbiAgW0NvbmZpZy5UT09MVElQX1RFWFRfQ09MT1JdOiAnd2hpdGUnLFxufVxuXG5leHBvcnQgY29uc3QgTWluaW1hbCA9IHtcbiAgW0NvbmZpZy5GT05UXTogR2VuZXJhbFtDb25maWcuRk9OVF0sXG4gIFtDb25maWcuRk9OVF9TSVpFXTogMCxcbiAgW0NvbmZpZy5DQUxFTkRBUl9CT1JERVJfUkFESVVTXTogMCxcbiAgW0NvbmZpZy5DQUxFTkRBUl9QQURESU5HXTogMCxcbiAgW0NvbmZpZy5DRUxMX1NJWkVdOiA2LFxuICBbQ29uZmlnLkxJTkVfSEVJR0hUXTogMCxcblxuICBbQ29uZmlnLkNBTEVOREFSX0JBQ0tHUk9VTkRdOiAnJyxcbiAgW0NvbmZpZy5DQUxFTkRBUl9URVhUX0NPTE9SXTogJycsXG4gIFtDb25maWcuQ0FMRU5EQVJfQk9SREVSX0NPTE9SXTogJycsXG4gIFtDb25maWcuTk9STUFMX0RBWV9CQUNLR1JPVU5EXTogJyM4ODg2JyxcbiAgW0NvbmZpZy5PRkZfREFZX0JBQ0tHUk9VTkRdOiAnIzg4ODMnLFxuICBbQ29uZmlnLlNUQVRJU1RJQ1NfQ09MT1JdOiAnJyxcbiAgW0NvbmZpZy5CSUxMQUJMRV9SRVBPUlRfQ09MT1JdOiAnJyxcbiAgW0NvbmZpZy5UT09MVElQX0JBQ0tHUk9VTkRdOiAnJyxcbiAgW0NvbmZpZy5UT09MVElQX1RFWFRfQ09MT1JdOiAnJyxcbn1cbiIsICJpbXBvcnQge0NvbmZpZ30gZnJvbSAnLi9Db25zdHMnXG5cbmV4cG9ydCBjbGFzcyBIZWxwZXIge1xuICBzdGF0aWMgZml4TGVuZ3RoKHN0cjogc3RyaW5nLCBsZW5ndGg6IG51bWJlcik6IHN0cmluZyB7XG4gICAgcmV0dXJuIHN0ci5wYWRFbmQobGVuZ3RoLCAnICcpO1xuICB9XG5cblxuICBzdGF0aWMgY29tcHV0ZUZvbnQocGFyYW1zLCBzaXplOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIHJldHVybiAoc2l6ZSAvIDEyKSAqIHBhcmFtc1tDb25maWcuRk9OVF9TSVpFXSArIFwicHggXCIgKyBwYXJhbXNbQ29uZmlnLkZPTlRdXG4gIH1cblxuXG4gIHN0YXRpYyBpc051bWJlcihzdHI6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJyB8fCBzdHIudHJpbSgpID09PSAnJykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiAhaXNOYU4ocGFyc2VGbG9hdChzdHIpKTtcbiAgfVxuXG5cbiAgc3RhdGljIGNvbnZlcnRUb0hvdXJNaW4oZHVyYXRpb24pOiBzdHJpbmcge1xuICAgIGlmIChpc05hTihkdXJhdGlvbikpIHtcbiAgICAgIHJldHVybiAnMDowMCdcbiAgICB9XG5cbiAgICBjb25zdCBob3VycyA9IE1hdGguZmxvb3IoZHVyYXRpb24pXG4gICAgY29uc3QgbWludXRlcyA9IE1hdGgucm91bmQoKGR1cmF0aW9uIC0gaG91cnMpICogNjApXG4gICAgcmV0dXJuIGAke2hvdXJzfToke21pbnV0ZXMudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpfWBcbiAgfVxuXG5cbiAgc3RhdGljIGdlbmVyYXRlSGV4KGxlbmd0aDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBjb25zdCBjaGFyYWN0ZXJzID0gJzAxMjM0NTY3ODlhYmNkZWYnO1xuICAgIGxldCByZXN1bHQgPSAnJztcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc3VsdCArPSBjaGFyYWN0ZXJzLmNoYXJBdChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjaGFyYWN0ZXJzLmxlbmd0aCkpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuXG4gIHN0YXRpYyBnZXREYXlPZldlZWsoZGF0ZVN0cmluZzogc3RyaW5nKTogbnVtYmVyIHtcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoZGF0ZVN0cmluZylcbiAgICByZXR1cm4gZGF0ZS5nZXREYXkoKVxuICB9XG5cblxuICBzdGF0aWMgZ2V0Q29sb3IocGFyYW1zLCB2YWx1ZTogbnVtYmVyLCBtYXg6IG51bWJlcik6IHN0cmluZyB7XG4gICAgY29uc3QgbWluVmFsdWUgPSA3NTtcbiAgICBjb25zdCBpbnRlbnNpdHkgPSBNYXRoLmZsb29yKCgodmFsdWUgLyBtYXgpICogKDI1NSAtIG1pblZhbHVlKSkgKyBtaW5WYWx1ZSk7XG5cbiAgICBjb25zdCBtYXhJbnRlbnNpdHlDb2xvciA9IHBhcmFtc1tDb25maWcuSU5URU5TSVRZX0NPTE9SXTtcblxuICAgIGNvbnN0IGhleFRvUmdiID0gKGhleCkgPT4ge1xuICAgICAgY29uc3QgciA9IHBhcnNlSW50KGhleC5zbGljZSgxLCAzKSwgMTYpO1xuICAgICAgY29uc3QgZyA9IHBhcnNlSW50KGhleC5zbGljZSgzLCA1KSwgMTYpO1xuICAgICAgY29uc3QgYiA9IHBhcnNlSW50KGhleC5zbGljZSg1LCA3KSwgMTYpO1xuICAgICAgcmV0dXJuIHsgciwgZywgYiB9O1xuICAgIH07XG5cbiAgICBjb25zdCBjb21wdXRlTG93ZXJJbnRlbnNpdHkgPSAoY29sb3IsIGludGVuc2l0eSkgPT4ge1xuICAgICAgY29uc3QgeyByLCBnLCBiIH0gPSBoZXhUb1JnYihjb2xvcik7XG4gICAgICBjb25zdCBzY2FsZSA9IGludGVuc2l0eSAvIDI1NTsgLy8gU2NhbGUgZmFjdG9yIGJhc2VkIG9uIGludGVuc2l0eVxuICAgICAgcmV0dXJuIGByZ2IoJHtNYXRoLmZsb29yKHIgKiBzY2FsZSl9LCAke01hdGguZmxvb3IoZyAqIHNjYWxlKX0sICR7TWF0aC5mbG9vcihiICogc2NhbGUpfSlgO1xuICAgIH07XG5cbiAgICByZXR1cm4gY29tcHV0ZUxvd2VySW50ZW5zaXR5KG1heEludGVuc2l0eUNvbG9yLCBpbnRlbnNpdHkpO1xuICB9XG5cblxuICBzdGF0aWMgZ2V0U3RyZWFrcyhwYXJhbXMsIHRpbWVzKSB7XG4gICAgY29uc3QgZGF0ZXMgPSBPYmplY3Qua2V5cyh0aW1lcykubWFwKGRhdGUgPT4gbmV3IERhdGUoZGF0ZSkpXG4gICAgZGF0ZXMuc29ydCgoYSwgYikgPT4gYS5nZXRUaW1lKCkgLSBiLmdldFRpbWUoKSlcblxuICAgIGxldCBzdHJlYWtzID0gW11cbiAgICBsZXQgY3VycmVudFN0cmVhayA9IDFcblxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgZGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBpc09mZiA9IHBhcmFtc1tDb25maWcuT0ZGX0RBWVNdLmluY2x1ZGVzKGRhdGVzW2kgLSAxXS5nZXREYXkoKSlcblxuICAgICAgY29uc3QgZGlmZkluRGF5cyA9IChkYXRlc1tpXS5nZXRUaW1lKCkgLSBkYXRlc1tpIC0gMV0uZ2V0VGltZSgpKSAvICgxMDAwICogNjAgKiA2MCAqIDI0KVxuICAgICAgaWYgKGRpZmZJbkRheXMgPT09IDEgfHwgaXNPZmYpIHtcbiAgICAgICAgY3VycmVudFN0cmVhaysrXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHJlYWtzLnB1c2goY3VycmVudFN0cmVhaylcbiAgICAgICAgY3VycmVudFN0cmVhayA9IDFcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzdHJlYWtzLnB1c2goY3VycmVudFN0cmVhaylcbiAgICByZXR1cm4gc3RyZWFrc1xuICB9XG5cblxuICBzdGF0aWMgY29tcHV0ZVN0cmVha1N0YXRzKHBhcmFtcywgdGltZXMpIHtcbiAgICBjb25zdCBzdHJlYWtzID0gdGhpcy5nZXRTdHJlYWtzKHBhcmFtcywgdGltZXMpXG4gICAgY29uc3Qgc3RyZWFrQ291bnQgPSBzdHJlYWtzLmxlbmd0aFxuICAgIGNvbnN0IGF2ZXJhZ2VTdHJlYWsgPSBzdHJlYWtzLnJlZHVjZSgoYWNjLCB2YWwpID0+IGFjYyArIHZhbCwgMCkgLyBzdHJlYWtDb3VudFxuICAgIGNvbnN0IGxvbmdlc3RTdHJlYWsgPSBNYXRoLm1heCguLi5zdHJlYWtzKVxuXG4gICAgcmV0dXJuIHtzdHJlYWtDb3VudCwgYXZlcmFnZVN0cmVhaywgbG9uZ2VzdFN0cmVha31cbiAgfVxufVxuIiwgImltcG9ydCB7SGVscGVyfSBmcm9tICcuL0hlbHBlcidcbmltcG9ydCB7Q29uZmlnLCBEYXlzLCBQaHJhc2VzfSBmcm9tICcuL0NvbnN0cydcblxuZXhwb3J0IGNsYXNzIENhbnZhcyB7XG4gIHN0YXRpYyBlcnJvciA9IHVuZGVmaW5lZFxuXG4gIHN0YXRpYyBzZXRFcnJvcih0aXRsZSkge1xuICAgIENhbnZhcy5lcnJvciA9IHRpdGxlXG4gIH1cblxuICBzdGF0aWMgY2xlYXJFcnJvcigpIHtcbiAgICBDYW52YXMuZXJyb3IgPSB1bmRlZmluZWRcbiAgfVxuXG5cbiAgc3RhdGljIHJlbmRlcihkaXYsIHBhcmFtcywgdGltZXMpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgY29uc3QgZHVyYXRpb25zID0gT2JqZWN0LnZhbHVlcyh0aW1lcykubWFwKGl0ZW0gPT4gaXRlbS50b3RhbER1cmF0aW9uKVxuXG4gICAgY29uc3QgbWluRHVyYXRpb24gPSBNYXRoLm1pbiguLi5kdXJhdGlvbnMpXG4gICAgY29uc3QgbWF4RHVyYXRpb24gPSBNYXRoLm1heCguLi5kdXJhdGlvbnMpXG5cbiAgICBsZXQgdG90YWxTdW0gPSAwXG5cbiAgICBmb3IgKGxldCBkYXRlIGluIHRpbWVzKSB7XG4gICAgICB0b3RhbFN1bSArPSB0aW1lc1tkYXRlXS50b3RhbER1cmF0aW9uXG4gICAgfVxuXG4gICAgY29uc3QgYXZlcmFnZUR1cmF0aW9uID0gZHVyYXRpb25zLnJlZHVjZSgoYWNjLCB2YWwpID0+IGFjYyArIHZhbCwgMCkgLyAzNjVcblxuICAgIGNvbnN0IHZhcmlhbmNlRHVyYXRpb24gPSBkdXJhdGlvbnMucmVkdWNlKChhY2MsIHZhbCkgPT4gYWNjICsgTWF0aC5wb3codmFsIC0gYXZlcmFnZUR1cmF0aW9uLCAyKSwgMCkgLyAzNjVcbiAgICBjb25zdCBzdGREZXZEdXJhdGlvbiA9IE1hdGguc3FydCh2YXJpYW5jZUR1cmF0aW9uKVxuXG4gICAgY29uc3Qgc3RhdHMgPSBIZWxwZXIuY29tcHV0ZVN0cmVha1N0YXRzKHBhcmFtcywgdGltZXMpXG5cbiAgICBjb25zdCBleGlzdGluZ0NhbnZhcyA9IGRpdi5xdWVyeVNlbGVjdG9yQWxsKCdjYW52YXMnKVxuICAgIGV4aXN0aW5nQ2FudmFzLmZvckVhY2goY2FudmFzID0+IGNhbnZhcy5yZW1vdmUoKSlcblxuICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpXG4gICAgY29uc3QgdG9vbHRpcENhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpXG5cbiAgICBjb25zdCBjZWxsU2l6ZSA9IHBhcmFtc1tDb25maWcuQ0VMTF9TSVpFXVxuICAgIGNvbnN0IHBhZGRpbmcgPSBjZWxsU2l6ZSAvIDVcbiAgICBsZXQgdG9wT2Zmc2V0ID0gcGFyYW1zW0NvbmZpZy5DQUxFTkRBUl9QQURESU5HXSArIHBhcmFtc1tDb25maWcuTElORV9IRUlHSFRdXG4gICAgbGV0IGxlZnRPZmZzZXQgPSBwYXJhbXNbQ29uZmlnLkNBTEVOREFSX1BBRERJTkddICsgMzBcbiAgICBsZXQgbGluZUNvdW50ID0gMFxuXG4gICAgaWYgKHBhcmFtc1tDb25maWcuU0hPV19CSUxMQUJMRV9TVEFUU10pIGxpbmVDb3VudCsrXG4gICAgaWYgKHBhcmFtc1tDb25maWcuU0hPV19TVFJFQUtTX1NUQVRTXSkgbGluZUNvdW50KytcbiAgICBpZiAocGFyYW1zW0NvbmZpZy5TSE9XX0dFTkVSQUxfU1RBVFNdKSBsaW5lQ291bnQrK1xuICAgIGlmIChsaW5lQ291bnQgPiAwKSBsaW5lQ291bnQrK1xuXG4gICAgaWYgKHBhcmFtc1tDb25maWcuRk9OVF9TSVpFXSA9PT0gMCkge1xuICAgICAgbGluZUNvdW50ID0gMFxuICAgICAgdG9wT2Zmc2V0ID0gcGFyYW1zW0NvbmZpZy5DQUxFTkRBUl9QQURESU5HXVxuICAgICAgbGVmdE9mZnNldCA9IHBhcmFtc1tDb25maWcuQ0FMRU5EQVJfUEFERElOR11cbiAgICB9XG5cbiAgICBsZXQgYm90dG9tT2Zmc2V0ID0gbGluZUNvdW50ICogcGFyYW1zW0NvbmZpZy5MSU5FX0hFSUdIVF1cblxuICAgIGxldCBkYXlzSW5Nb250aCA9IFszMSwgMjgsIDMxLCAzMCwgMzEsIDMwLCAzMSwgMzEsIDMwLCAzMSwgMzAsIDMxXVxuICAgIGlmIChwYXJhbXNbQ29uZmlnLllFQVJdICUgNCA9PT0gMCkgZGF5c0luTW9udGhbMV0gPSAyOVxuXG4gICAgbGV0IHlJbmRleCA9IDBcbiAgICBsZXQgeEluZGV4ID0gMFxuICAgIGxldCBsYXN0UmVuZGVyWCA9IDBcblxuICAgIGZvciAobGV0IG1vbnRoID0gMDsgbW9udGggPCAxMjsgbW9udGgrKykge1xuICAgICAgZm9yIChsZXQgZGF5ID0gMTsgZGF5IDw9IGRheXNJbk1vbnRoW21vbnRoXTsgZGF5KyspIHtcbiAgICAgICAgY29uc3QgeCA9IHhJbmRleCAqIChjZWxsU2l6ZSArIHBhZGRpbmcpXG4gICAgICAgIGNvbnN0IHJlbmRlclggPSB4ICsgbW9udGggKiAoY2VsbFNpemUgKyBwYWRkaW5nICsgY2VsbFNpemUpICsgbGVmdE9mZnNldFxuICAgICAgICBsYXN0UmVuZGVyWCA9IHJlbmRlclhcbiAgICAgICAgeUluZGV4KytcbiAgICAgICAgaWYgKHlJbmRleCA9PT0gNykge1xuICAgICAgICAgIHhJbmRleCsrXG4gICAgICAgICAgeUluZGV4ID0gMFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2FudmFzLndpZHRoID0gbGFzdFJlbmRlclggKyBjZWxsU2l6ZSArIHBhcmFtc1tDb25maWcuQ0FMRU5EQVJfUEFERElOR11cbiAgICBjYW52YXMuaGVpZ2h0ID0gNyAqIChjZWxsU2l6ZSArIHBhZGRpbmcpICsgdG9wT2Zmc2V0ICsgYm90dG9tT2Zmc2V0ICsgcGFyYW1zW0NvbmZpZy5DQUxFTkRBUl9QQURESU5HXVxuXG4gICAgdG9vbHRpcENhbnZhcy53aWR0aCA9IGNhbnZhcy53aWR0aFxuICAgIHRvb2x0aXBDYW52YXMuaGVpZ2h0ID0gY2FudmFzLmhlaWdodFxuICAgIHRvb2x0aXBDYW52YXMuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnXG4gICAgdG9vbHRpcENhbnZhcy5zdHlsZS50b3AgPSAnMCdcbiAgICB0b29sdGlwQ2FudmFzLnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnbm9uZSdcblxuICAgIGlmIChwYXJhbXNbQ29uZmlnLkNBTEVOREFSX0JPUkRFUl9DT0xPUl0pIHtcbiAgICAgIGNhbnZhcy5zdHlsZS5ib3JkZXIgPSAnMXB4IHNvbGlkICcgKyBwYXJhbXNbQ29uZmlnLkNBTEVOREFSX0JPUkRFUl9DT0xPUl1cbiAgICB9XG5cbiAgICBjYW52YXMuc3R5bGUuYm9yZGVyUmFkaXVzID0gcGFyYW1zW0NvbmZpZy5DQUxFTkRBUl9CT1JERVJfUkFESVVTXSArICdweCdcbiAgICBjYW52YXMuc3R5bGUuYmFja2dyb3VuZCA9IHBhcmFtc1tDb25maWcuQ0FMRU5EQVJfQkFDS0dST1VORF1cbiAgICBjYW52YXMuc3R5bGUuZGlzcGxheSA9ICdibG9jaydcblxuICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpXG4gICAgaWYgKCFjdHgpIHJldHVyblxuXG4gICAgZnVuY3Rpb24gZHJhd1RleHQodGV4dDogc3RyaW5nLCB4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgICAgY29uc3QgZGltRmlsdGVyID0gJ29wYWNpdHkoMC43NSknXG4gICAgICBjdHguZmlsdGVyID0gZGltRmlsdGVyXG5cbiAgICAgIGNvbnN0IHBhcnRzID0gdGV4dC5zcGxpdCgvKDx8PikvKVxuXG4gICAgICBwYXJ0cy5mb3JFYWNoKHBhcnQgPT4ge1xuICAgICAgICBpZiAocGFydCA9PT0gJzwnKSB7XG4gICAgICAgICAgY3R4LmZpbHRlciA9ICdub25lJ1xuICAgICAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICc+Jykge1xuICAgICAgICAgIGN0eC5maWx0ZXIgPSBkaW1GaWx0ZXJcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjdHguZmlsbFRleHQocGFydCwgeCwgeSlcbiAgICAgICAgICB4ICs9IGN0eC5tZWFzdXJlVGV4dChwYXJ0KS53aWR0aFxuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgICBjdHguZmlsdGVyID0gJ25vbmUnXG4gICAgfVxuXG4gICAgY3R4LmltYWdlU21vb3RoaW5nRW5hYmxlZCA9IHRydWVcblxuICAgIGlmIChDYW52YXMuZXJyb3IpIHtcbiAgICAgIGNvbnN0IGxpbmVzID0gQ2FudmFzLmVycm9yLnNwbGl0KCdcXG4nKVxuICAgICAgY29uc3QgdGl0bGUgPSBsaW5lc1swXVxuICAgICAgY29uc3QgZGVzY3JpcHRpb25zID0gbGluZXMuc2xpY2UoMSlcblxuICAgICAgbGV0IHkgPSAzMFxuICAgICAgY3R4LmZpbGxTdHlsZSA9ICcjMjEyJ1xuICAgICAgY3R4LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodClcbiAgICAgIGN0eC50ZXh0QWxpZ24gPSAnY2VudGVyJ1xuICAgICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnXG4gICAgICBjdHguZmlsbFN0eWxlID0gJyNmNDQnXG4gICAgICBjdHguZm9udCA9IEhlbHBlci5jb21wdXRlRm9udChwYXJhbXMsIDIwKVxuICAgICAgY3R4LmZpbGxUZXh0KHRpdGxlLCBjYW52YXMud2lkdGggLyAyLCB5KVxuXG4gICAgICBpZiAoZGVzY3JpcHRpb25zKSB7XG4gICAgICAgIGN0eC5mb250ID0gSGVscGVyLmNvbXB1dGVGb250KHBhcmFtcywgMTYpXG4gICAgICAgIGN0eC50ZXh0QWxpZ24gPSAnbGVmdCdcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICcjYWFhJ1xuXG4gICAgICAgIGRlc2NyaXB0aW9ucy5mb3JFYWNoKChsaW5lKSA9PiB7XG4gICAgICAgICAgeSArPSAyMFxuICAgICAgICAgIGN0eC5maWxsVGV4dChsaW5lLCAyMCwgeSlcbiAgICAgICAgfSlcbiAgICAgIH1cblxuICAgICAgZGl2LmlubmVyVGV4dCA9ICcnXG4gICAgICBkaXYuYXBwZW5kQ2hpbGQoY2FudmFzKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgdG9vbHRpcEN0eCA9IHRvb2x0aXBDYW52YXMuZ2V0Q29udGV4dCgnMmQnKVxuXG4gICAgY29uc3QgbW9udGhOYW1lcyA9IFsuLi5BcnJheSgxMildLm1hcCgoXywgaSkgPT4gbmV3IERhdGUoMCwgaSkudG9Mb2NhbGVTdHJpbmcoJ2RlZmF1bHQnLCB7bW9udGg6ICdzaG9ydCd9KSlcblxuICAgIGN0eC50ZXh0QWxpZ24gPSAnbGVmdCdcbiAgICBjdHgudGV4dEJhc2VsaW5lID0gJ3RvcCdcbiAgICBjdHguZm9udCA9IEhlbHBlci5jb21wdXRlRm9udChwYXJhbXMsIDE0KVxuICAgIGN0eC5maWxsU3R5bGUgPSBwYXJhbXNbQ29uZmlnLkNBTEVOREFSX1RFWFRfQ09MT1JdXG4gICAgY3R4LmZpbGxUZXh0KCcnICsgcGFyYW1zW0NvbmZpZy5ZRUFSXSwgcGFyYW1zW0NvbmZpZy5DQUxFTkRBUl9QQURESU5HXSwgcGFyYW1zW0NvbmZpZy5DQUxFTkRBUl9QQURESU5HXSlcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgRGF5cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgeCA9IHBhcmFtc1tDb25maWcuQ0FMRU5EQVJfUEFERElOR11cbiAgICAgIGNvbnN0IHkgPSBpICogKGNlbGxTaXplICsgcGFkZGluZykgKyB0b3BPZmZzZXQgKyBjZWxsU2l6ZSAvIDJcbiAgICAgIGN0eC50ZXh0QWxpZ24gPSAnbGVmdCdcbiAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJ1xuICAgICAgY3R4LmZvbnQgPSBIZWxwZXIuY29tcHV0ZUZvbnQocGFyYW1zLCAxMSlcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBwYXJhbXNbQ29uZmlnLkNBTEVOREFSX1RFWFRfQ09MT1JdXG4gICAgICBjdHguZmlsbFRleHQoRGF5c1tpXSwgeCwgeSlcbiAgICB9XG5cbiAgICB5SW5kZXggPSAwXG4gICAgeEluZGV4ID0gMFxuICAgIGxldCBjZWxsRGF0YSA9IFtdXG5cbiAgICBsYXN0UmVuZGVyWCA9IDBcbiAgICBsZXQgbWF4WSA9IDBcblxuICAgIHlJbmRleCA9IEhlbHBlci5nZXREYXlPZldlZWsocGFyYW1zW0NvbmZpZy5ZRUFSXSArICctMDEtMDEnKVxuXG4gICAgZm9yIChsZXQgbW9udGggPSAwOyBtb250aCA8IDEyOyBtb250aCsrKSB7XG4gICAgICBmb3IgKGxldCBkYXkgPSAxOyBkYXkgPD0gZGF5c0luTW9udGhbbW9udGhdOyBkYXkrKykge1xuICAgICAgICBjb25zdCBkYXRlID0gYCR7cGFyYW1zW0NvbmZpZy5ZRUFSXX0tJHtTdHJpbmcobW9udGggKyAxKS5wYWRTdGFydCgyLCAnMCcpfS0ke1N0cmluZyhkYXkpLnBhZFN0YXJ0KDIsICcwJyl9YFxuICAgICAgICBjb25zdCB2YWx1ZSA9IHRpbWVzW2RhdGVdXG4gICAgICAgIGNvbnN0IGR1cmF0aW9uID0gdmFsdWUgPyB2YWx1ZS50b3RhbER1cmF0aW9uIDogMFxuICAgICAgICBjb25zdCBodW1hbml6ZSA9IHZhbHVlID8gdmFsdWUuaHVtYW5pemUgOiAnMDowMCdcblxuICAgICAgICBjb25zdCB4ID0geEluZGV4ICogKGNlbGxTaXplICsgcGFkZGluZylcbiAgICAgICAgY29uc3QgeSA9IHlJbmRleCAqIChjZWxsU2l6ZSArIHBhZGRpbmcpXG5cbiAgICAgICAgY29uc3QgcmVuZGVyWCA9IHggKyBtb250aCAqIChjZWxsU2l6ZSArIHBhZGRpbmcgKyBjZWxsU2l6ZSkgKyBsZWZ0T2Zmc2V0XG4gICAgICAgIGNvbnN0IHJlbmRlclkgPSB5ICsgdG9wT2Zmc2V0XG5cbiAgICAgICAgbGFzdFJlbmRlclggPSByZW5kZXJYXG4gICAgICAgIGlmIChyZW5kZXJZID4gbWF4WSkge1xuICAgICAgICAgIG1heFkgPSByZW5kZXJZXG4gICAgICAgIH1cblxuICAgICAgICBjdHguZmlsbFN0eWxlID0gJ3RyYW5zcGFyZW50J1xuXG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBIZWxwZXIuZ2V0Q29sb3IocGFyYW1zLCBkdXJhdGlvbiwgbWF4RHVyYXRpb24pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHBhcmFtc1tDb25maWcuT0ZGX0RBWVNdLmluY2x1ZGVzKHlJbmRleCkpIHtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBwYXJhbXNbQ29uZmlnLk9GRl9EQVlfQkFDS0dST1VORF1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHBhcmFtc1tDb25maWcuTk9STUFMX0RBWV9CQUNLR1JPVU5EXVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGN0eC5maWxsUmVjdChyZW5kZXJYLCByZW5kZXJZLCBjZWxsU2l6ZSwgY2VsbFNpemUpXG4gICAgICAgIGNlbGxEYXRhLnB1c2goe2RhdGUsIHg6IHJlbmRlclgsIHk6IHJlbmRlclksIHdpZHRoOiBjZWxsU2l6ZSwgaGVpZ2h0OiBjZWxsU2l6ZSwgdmFsdWU6IGh1bWFuaXplID8/IDB9KVxuXG4gICAgICAgIHlJbmRleCsrXG5cbiAgICAgICAgaWYgKHlJbmRleCA9PT0gNykge1xuICAgICAgICAgIHhJbmRleCsrXG4gICAgICAgICAgeUluZGV4ID0gMFxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGN0eC5mb250ID0gSGVscGVyLmNvbXB1dGVGb250KHBhcmFtcywgMTIpXG4gICAgICBjdHguZmlsbFN0eWxlID0gcGFyYW1zW0NvbmZpZy5DQUxFTkRBUl9URVhUX0NPTE9SXVxuICAgICAgY3R4LnRleHRBbGlnbiA9ICdyaWdodCdcbiAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAndG9wJ1xuICAgICAgY3R4LmZpbGxUZXh0KG1vbnRoTmFtZXNbbW9udGhdLCBsYXN0UmVuZGVyWCAtIGNlbGxTaXplLCBwYXJhbXNbQ29uZmlnLkNBTEVOREFSX1BBRERJTkddKVxuICAgIH1cblxuICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAndG9wJ1xuXG4gICAgbGV0IHkgPSBtYXhZICsgcGFyYW1zW0NvbmZpZy5MSU5FX0hFSUdIVF1cblxuICAgIGZ1bmN0aW9uIGFkZFN0YXQobmFtZSwgdmFsdWUpOiBzdHJpbmcge1xuICAgICAgcmV0dXJuIEhlbHBlci5maXhMZW5ndGgobmFtZSArICc6IDwnICsgdmFsdWUsIDI1KSArICc+J1xuICAgIH1cblxuICAgIGlmIChwYXJhbXNbQ29uZmlnLlNIT1dfQklMTEFCTEVfU1RBVFNdKSB7XG4gICAgICB5ICs9IHBhcmFtc1tDb25maWcuTElORV9IRUlHSFRdXG5cbiAgICAgIGxldCB0b3RhbCA9IE1hdGgucm91bmQodG90YWxTdW0gKiBwYXJhbXNbQ29uZmlnLkhPVVJMWV9SQVRFXSlcbiAgICAgIGxldCBwYXllZCA9IHBhcmFtc1tDb25maWcuUEFZRURfSE9VUlNdICogcGFyYW1zW0NvbmZpZy5IT1VSTFlfUkFURV1cbiAgICAgIGxldCByZW1haW5zID0gdG90YWwgLSBwYXllZFxuICAgICAgbGV0IGNvbnZlcnRlZCA9IHJlbWFpbnMgKiBwYXJhbXNbQ29uZmlnLkNPTlZFUlNJT05fRkVFXVxuICAgICAgbGV0IHBheVN0ciA9IGFkZFN0YXQoUGhyYXNlcy5QQVlFRCwgbmV3IEludGwuTnVtYmVyRm9ybWF0KCkuZm9ybWF0KHBheWVkKSArICcgJyArIHBhcmFtc1tDb25maWcuSE9VUkxZX1JBVEVfQ1VSUkVOQ1ldKVxuICAgICAgcGF5U3RyICs9IGFkZFN0YXQoUGhyYXNlcy5QQVlBQkxFLCBuZXcgSW50bC5OdW1iZXJGb3JtYXQoKS5mb3JtYXQodG90YWwpICsgJyAnICsgcGFyYW1zW0NvbmZpZy5IT1VSTFlfUkFURV9DVVJSRU5DWV0pXG4gICAgICBwYXlTdHIgKz0gYWRkU3RhdChQaHJhc2VzLlJFTUFJTlMsIG5ldyBJbnRsLk51bWJlckZvcm1hdCgpLmZvcm1hdChyZW1haW5zKSArICcgJyArIHBhcmFtc1tDb25maWcuSE9VUkxZX1JBVEVfQ1VSUkVOQ1ldKVxuICAgICAgcGF5U3RyICs9IGFkZFN0YXQoUGhyYXNlcy5CSUxMQUJMRSwgbmV3IEludGwuTnVtYmVyRm9ybWF0KCkuZm9ybWF0KGNvbnZlcnRlZCkgKyAnICcgKyBwYXJhbXNbQ29uZmlnLkNPTlZFUlNJT05fQ1VSUkVOQ1ldKVxuICAgICAgY3R4LnRleHRBbGlnbiA9ICdsZWZ0J1xuICAgICAgY3R4LmZvbnQgPSBIZWxwZXIuY29tcHV0ZUZvbnQocGFyYW1zLCAxNClcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBwYXJhbXNbQ29uZmlnLkJJTExBQkxFX1JFUE9SVF9DT0xPUl1cbiAgICAgIGRyYXdUZXh0KHBheVN0ciwgcGFyYW1zW0NvbmZpZy5DQUxFTkRBUl9QQURESU5HXSwgeSlcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zW0NvbmZpZy5TSE9XX0dFTkVSQUxfU1RBVFNdKSB7XG4gICAgICB5ICs9IHBhcmFtc1tDb25maWcuTElORV9IRUlHSFRdXG4gICAgICBsZXQgc3RyID0gYWRkU3RhdChQaHJhc2VzLkFWRVJBR0UsIEhlbHBlci5jb252ZXJ0VG9Ib3VyTWluKGF2ZXJhZ2VEdXJhdGlvbikpXG4gICAgICBzdHIgKz0gYWRkU3RhdChQaHJhc2VzLkRFViwgSGVscGVyLmNvbnZlcnRUb0hvdXJNaW4oc3RkRGV2RHVyYXRpb24pKVxuICAgICAgc3RyICs9IGFkZFN0YXQoUGhyYXNlcy5NSU4sIEhlbHBlci5jb252ZXJ0VG9Ib3VyTWluKG1pbkR1cmF0aW9uKSlcbiAgICAgIHN0ciArPSBhZGRTdGF0KFBocmFzZXMuTUFYLCBIZWxwZXIuY29udmVydFRvSG91ck1pbihtYXhEdXJhdGlvbikpXG4gICAgICBzdHIgKz0gYWRkU3RhdChQaHJhc2VzLlNVTSwgSGVscGVyLmNvbnZlcnRUb0hvdXJNaW4odG90YWxTdW0pKVxuXG4gICAgICBjdHgudGV4dEFsaWduID0gJ2xlZnQnXG4gICAgICBjdHguZm9udCA9IEhlbHBlci5jb21wdXRlRm9udChwYXJhbXMsIDE0KVxuICAgICAgY3R4LmZpbGxTdHlsZSA9IHBhcmFtc1tDb25maWcuU1RBVElTVElDU19DT0xPUl1cbiAgICAgIGRyYXdUZXh0KHN0ciwgcGFyYW1zW0NvbmZpZy5DQUxFTkRBUl9QQURESU5HXSwgeSlcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zW0NvbmZpZy5TSE9XX1NUUkVBS1NfU1RBVFNdKSB7XG4gICAgICB5ICs9IHBhcmFtc1tDb25maWcuTElORV9IRUlHSFRdXG4gICAgICBsZXQgc3RyID0gYWRkU3RhdChQaHJhc2VzLlNUUkVBS19DT1VOVCwgc3RhdHMuc3RyZWFrQ291bnQpXG4gICAgICBzdHIgKz0gYWRkU3RhdChQaHJhc2VzLkFWRVJBR0VfU1RSRUFLLCBNYXRoLnJvdW5kKHN0YXRzLmF2ZXJhZ2VTdHJlYWspKVxuICAgICAgc3RyICs9IGFkZFN0YXQoUGhyYXNlcy5MT05HRVNUX1NUUkVBSywgc3RhdHMubG9uZ2VzdFN0cmVhaylcblxuICAgICAgY3R4LnRleHRBbGlnbiA9ICdsZWZ0J1xuICAgICAgY3R4LmZvbnQgPSBIZWxwZXIuY29tcHV0ZUZvbnQocGFyYW1zLCAxNClcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBwYXJhbXNbQ29uZmlnLlNUQVRJU1RJQ1NfQ09MT1JdXG4gICAgICBkcmF3VGV4dChzdHIsIHBhcmFtc1tDb25maWcuQ0FMRU5EQVJfUEFERElOR10sIHkpXG4gICAgfVxuXG4gICAgZGl2LmlubmVyVGV4dCA9ICcnXG4gICAgZGl2LmFwcGVuZENoaWxkKGNhbnZhcylcbiAgICBkaXYuYXBwZW5kQ2hpbGQodG9vbHRpcENhbnZhcylcblxuICAgIGlmICghdG9vbHRpcEN0eCkgeyByZXR1cm4gfVxuXG4gICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIChldmVudCkgPT4ge1xuICAgICAgY29uc3QgbW91c2VYID0gZXZlbnQub2Zmc2V0WFxuICAgICAgY29uc3QgbW91c2VZID0gZXZlbnQub2Zmc2V0WVxuICAgICAgbGV0IGZvdW5kID0gZmFsc2VcblxuXG4gICAgICB0b29sdGlwQ3R4LmNsZWFyUmVjdCgwLCAwLCB0b29sdGlwQ2FudmFzLndpZHRoLCB0b29sdGlwQ2FudmFzLmhlaWdodClcblxuICAgICAgaWYgKHBhcmFtc1tDb25maWcuVE9PTFRJUF9CQUNLR1JPVU5EXSkge1xuICAgICAgICBmb3IgKGxldCBjZWxsIG9mIGNlbGxEYXRhKSB7XG4gICAgICAgICAgaWYgKG1vdXNlWCA+PSBjZWxsLnggJiYgbW91c2VYIDw9IGNlbGwueCArIGNlbGwud2lkdGggJiZcbiAgICAgICAgICAgIG1vdXNlWSA+PSBjZWxsLnkgJiYgbW91c2VZIDw9IGNlbGwueSArIGNlbGwuaGVpZ2h0KSB7XG4gICAgICAgICAgICB0b29sdGlwQ3R4LmZpbGxTdHlsZSA9IHBhcmFtc1tDb25maWcuVE9PTFRJUF9CQUNLR1JPVU5EXVxuICAgICAgICAgICAgdG9vbHRpcEN0eC5maWxsUmVjdChtb3VzZVggLSAxNTAgLyAyLCBtb3VzZVkgKyA1LCAxNTAsIDMwKVxuXG4gICAgICAgICAgICB0b29sdGlwQ3R4LnRleHRBbGlnbiA9ICdjZW50ZXInXG4gICAgICAgICAgICB0b29sdGlwQ3R4LmZvbnQgPSBIZWxwZXIuY29tcHV0ZUZvbnQocGFyYW1zLCAxMilcbiAgICAgICAgICAgIHRvb2x0aXBDdHguZmlsbFN0eWxlID0gcGFyYW1zW0NvbmZpZy5UT09MVElQX1RFWFRfQ09MT1JdXG4gICAgICAgICAgICB0b29sdGlwQ3R4LmZpbGxUZXh0KGAke2NlbGwuZGF0ZX0gfCAke2NlbGwudmFsdWV9IEhvdXJzYCwgbW91c2VYLCBtb3VzZVkgKyAyNSlcbiAgICAgICAgICAgIGZvdW5kID0gdHJ1ZVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFmb3VuZCkge1xuICAgICAgICB0b29sdGlwQ3R4LmNsZWFyUmVjdCgwLCAwLCB0b29sdGlwQ2FudmFzLndpZHRoLCB0b29sdGlwQ2FudmFzLmhlaWdodClcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3V0JywgKGV2ZW50KSA9PiB7XG4gICAgICB0b29sdGlwQ3R4LmNsZWFyUmVjdCgwLCAwLCB0b29sdGlwQ2FudmFzLndpZHRoLCB0b29sdGlwQ2FudmFzLmhlaWdodClcbiAgICB9KVxuICB9XG59XG4iLCAiaW1wb3J0IHtDb25maWd9IGZyb20gJy4uL0NvbnN0cydcblxuZXhwb3J0IGNsYXNzIEZha2Uge1xuICBzdGF0aWMgUkVDT1JEU19DT1VOVCA9IDUwXG5cbiAgc3RhdGljIHJhbmRvbUR1cmF0aW9uKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQoKE1hdGgucmFuZG9tKCkgKiAyKS50b0ZpeGVkKDEwKSk7XG4gIH1cblxuXG4gIHN0YXRpYyBodW1hbml6ZUR1cmF0aW9uKGR1cmF0aW9uOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGNvbnN0IGhvdXJzID0gTWF0aC5mbG9vcihkdXJhdGlvbik7XG4gICAgY29uc3QgbWludXRlcyA9IE1hdGgucm91bmQoKGR1cmF0aW9uIC0gaG91cnMpICogNjApO1xuICAgIHJldHVybiBgJHtob3Vyc306JHttaW51dGVzLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKX1gO1xuICB9XG5cblxuICBzdGF0aWMgcmFuZG9tRGF0ZSh5ZWFyOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGNvbnN0IHN0YXJ0ID0gbmV3IERhdGUoeWVhciwgMCwgMSk7XG4gICAgY29uc3QgZW5kID0gbmV3IERhdGUoeWVhciwgMTEsIDMxKTtcbiAgICBjb25zdCByYW5kb21UaW1lID0gc3RhcnQuZ2V0VGltZSgpICsgTWF0aC5yYW5kb20oKSAqIChlbmQuZ2V0VGltZSgpIC0gc3RhcnQuZ2V0VGltZSgpKTtcbiAgICBjb25zdCByYW5kb21EYXRlID0gbmV3IERhdGUocmFuZG9tVGltZSk7XG4gICAgcmV0dXJuIHJhbmRvbURhdGUudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdO1xuICB9XG5cblxuICBzdGF0aWMgZmV0Y2gocGFyYW1zLCBvbkRvbmUpIHtcbiAgICBjb25zdCBkYXRhID0ge307XG5cbiAgICB3aGlsZSAoT2JqZWN0LmtleXMoZGF0YSkubGVuZ3RoIDwgRmFrZS5SRUNPUkRTX0NPVU5UKSB7XG4gICAgICBjb25zdCBkYXRlID0gdGhpcy5yYW5kb21EYXRlKHBhcmFtc1tDb25maWcuWUVBUl0pO1xuXG4gICAgICBpZiAoIWRhdGFbZGF0ZV0pIHtcbiAgICAgICAgY29uc3QgdG90YWxEdXJhdGlvbiA9IHRoaXMucmFuZG9tRHVyYXRpb24oKTtcbiAgICAgICAgZGF0YVtkYXRlXSA9IHtcbiAgICAgICAgICB0b3RhbER1cmF0aW9uLFxuICAgICAgICAgIGVudHJpZXM6IFtdLFxuICAgICAgICAgIGh1bWFuaXplOiB0aGlzLmh1bWFuaXplRHVyYXRpb24odG90YWxEdXJhdGlvbiksXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgb25Eb25lKGRhdGEpXG4gIH1cbn1cbiIsICJpbXBvcnQge0hlbHBlcn0gZnJvbSAnLi4vSGVscGVyJ1xuaW1wb3J0IHtDb25maWcsIFBocmFzZXN9IGZyb20gJy4uL0NvbnN0cydcbmltcG9ydCB7Q2FudmFzfSBmcm9tICcuLi9DYW52YXMnXG5cbmV4cG9ydCBjbGFzcyBUb2dnbCB7XG4gIHN0YXRpYyBhc3luYyBmZXRjaChwYXJhbXMsIG9uRG9uZSkge1xuICAgIGNvbnN0IGFwaVRva2VuID0gcGFyYW1zW0NvbmZpZy5UT0dHTF9BUElfQVVUSF1cbiAgICBpZiAoIWFwaVRva2VuIHx8IGFwaVRva2VuLmxlbmd0aCAhPT0gMzIpIHtcbiAgICAgIENhbnZhcy5zZXRFcnJvcihQaHJhc2VzLkVSUk9SX0lOVkFMSURfVE9HR0xfQVBJX0FVVEgpXG4gICAgICBvbkRvbmUoe30pXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCB3b3Jrc3BhY2VJZCA9IHBhcmFtc1tDb25maWcuVE9HR0xfV09SS1NQQUNFX0lEXVxuICAgIGlmICghd29ya3NwYWNlSWQpIHtcbiAgICAgIENhbnZhcy5zZXRFcnJvcihQaHJhc2VzLkVSUk9SX0lOVkFMSURfVE9HR0xfV09SS1NQQUNFX0lEKVxuICAgICAgb25Eb25lKHt9KVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgcHJvamVjdElkcyA9IEpTT04ucGFyc2UocGFyYW1zW0NvbmZpZy5UT0dHTF9QUk9KRUNUX0lEU10gPz8gJ1tdJylcbiAgICBjb25zdCBkYWlseVN1bW1hcnkgPSB7fVxuXG4gICAgbGV0IHByb2plY3RzID0gJydcbiAgICBpZiAocHJvamVjdElkcy5sZW5ndGggPiAwKSB7XG4gICAgICBwcm9qZWN0cyA9ICcmcHJvamVjdF9pZHM9JyArIHByb2plY3RJZHMuam9pbignLCcpXG4gICAgfVxuXG4gICAgY29uc3QgdG9nZ2xBcGlVcmwgPSBgaHR0cHM6Ly9hcGkudHJhY2sudG9nZ2wuY29tL3JlcG9ydHMvYXBpL3YyL2RldGFpbHM/d29ya3NwYWNlX2lkPSR7d29ya3NwYWNlSWR9JnVzZXJfYWdlbnQ9aGVhdG1hcCZzaW5jZT0ke3BhcmFtc1tDb25maWcuWUVBUl19LTAxLTAxJnVudGlsPSR7cGFyYW1zW0NvbmZpZy5ZRUFSXX0tMTItMzEmcGVyX3BhZ2U9MTAwMDAwMCR7cHJvamVjdHN9YFxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgICdBdXRob3JpemF0aW9uJzogJ0Jhc2ljICcgKyBidG9hKGFwaVRva2VuICsgJzphcGlfdG9rZW4nKSxcbiAgICAgIH1cblxuICAgICAgY29uc3QgdGltZUVudHJpZXMgPSBhd2FpdCB0aGlzLmZldGNoQWxsVGltZUVudHJpZXModG9nZ2xBcGlVcmwsIGhlYWRlcnMpXG5cbiAgICAgIHRpbWVFbnRyaWVzLmZvckVhY2goZW50cnkgPT4ge1xuICAgICAgICBjb25zdCBkYXRlID0gZW50cnkuc3RhcnQuc3BsaXQoJ1QnKVswXVxuICAgICAgICBjb25zdCBkdXJhdGlvbiA9IGVudHJ5LmR1ciAvIDEwMDAgLyA2MCAvIDYwXG5cbiAgICAgICAgaWYgKCFkYWlseVN1bW1hcnlbZGF0ZV0pIHtcbiAgICAgICAgICBkYWlseVN1bW1hcnlbZGF0ZV0gPSB7dG90YWxEdXJhdGlvbjogMCwgZW50cmllczogW119XG4gICAgICAgIH1cblxuICAgICAgICBkYWlseVN1bW1hcnlbZGF0ZV0udG90YWxEdXJhdGlvbiArPSBkdXJhdGlvblxuICAgICAgICBkYWlseVN1bW1hcnlbZGF0ZV0uaHVtYW5pemUgPSBIZWxwZXIuY29udmVydFRvSG91ck1pbihkYWlseVN1bW1hcnlbZGF0ZV0udG90YWxEdXJhdGlvbilcbiAgICAgIH0pXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB9XG5cbiAgICBvbkRvbmUoZGFpbHlTdW1tYXJ5KVxuICB9XG5cblxuICBzdGF0aWMgYXN5bmMgZmV0Y2hBbGxUaW1lRW50cmllcyh1cmw6IHN0cmluZywgaGVhZGVycykge1xuICAgIGxldCBhbGxFbnRyaWVzID0gW11cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke3VybH1gLCB7bWV0aG9kOiAnR0VUJywgaGVhZGVyc30pXG5cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXG4gICAgYWxsRW50cmllcyA9IGFsbEVudHJpZXMuY29uY2F0KGRhdGEuZGF0YSlcblxuICAgIHJldHVybiBhbGxFbnRyaWVzXG4gIH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFBQSxtQkFBMkM7OztBQ0EzQyxzQkFBaUU7OztBQ3dFMUQsSUFBTSxlQUFlO0FBQUEsRUFDMUIsQ0FBQyxxQ0FBcUIsR0FBRztBQUFBLEVBQ3pCLENBQUMsNkNBQXlCLEdBQUc7QUFBQSxFQUM3QixDQUFDLDJDQUF3QixHQUFHO0FBQUEsRUFDNUIsQ0FBQyxtQ0FBb0IsR0FBRztBQUFBLEVBQ3hCLENBQUMsaUJBQVcsR0FBRztBQUFBLEVBQ2YsQ0FBQyx5QkFBZSxHQUFHO0FBQUEsRUFDbkIsQ0FBQyxtQkFBWSxHQUFHO0FBQUEsRUFDaEIsQ0FBQyxpQkFBVyxHQUFHO0FBQUEsRUFDZixDQUFDLDJCQUFnQixHQUFHO0FBQUEsRUFDcEIsQ0FBQywrQ0FBMEIsR0FBRztBQUFBLEVBQzlCLENBQUMsK0NBQTBCLEdBQUc7QUFBQSxFQUM5QixDQUFDLG1EQUE0QixHQUFHO0FBQUEsRUFDaEMsQ0FBQyxxREFBNkIsR0FBRztBQUFBLEVBQ2pDLENBQUMseUNBQXVCLEdBQUc7QUFBQSxFQUMzQixDQUFDLDZDQUF5QixHQUFHO0FBQUEsRUFDN0IsQ0FBQyw2Q0FBeUIsR0FBRztBQUFBLEVBQzdCLENBQUMsbURBQTRCLEdBQUc7QUFBQSxFQUNoQyxDQUFDLDZDQUF5QixHQUFHO0FBQUEsRUFDN0IsQ0FBQyx1Q0FBc0IsR0FBRztBQUFBLEVBQzFCLENBQUMseUNBQXVCLEdBQUc7QUFBQSxFQUMzQixDQUFDLG1EQUE0QixHQUFHO0FBQUEsRUFDaEMsQ0FBQywrQkFBa0IsR0FBRztBQUFBLEVBQ3RC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LFlBQU0sY0FBYyxNQUFNLEtBQUssSUFBSSxNQUFNLEtBQUssVUFBVTtBQUN4RCxZQUFNLFVBQVUsSUFBSSxPQUFPLGtCQUFtQixPQUFPLEtBQUssaUJBQWtCLElBQUk7QUFDaEYsWUFBTSxrQkFBa0IsWUFBWSxRQUFRLFNBQVMsTUFBTTtBQUMzRCxZQUFNLEtBQUssSUFBSSxNQUFNLE9BQU8sWUFBWSxlQUFlO0FBQUEsSUFDekQsQ0FBQyxFQUFFLEtBQUs7QUFBQSxFQUNWO0FBQUEsRUFHQSxPQUFPLFFBQVE7QUFDYixVQUFNLE1BQU0sU0FBUyxLQUFLO0FBQzFCLFFBQUksTUFBTSxXQUFXO0FBQ3JCLFFBQUksWUFBWTtBQUNoQixRQUFJLE1BQU0sTUFBTTtBQUNoQixRQUFJLE1BQU0sU0FBUztBQUNuQixRQUFJLE1BQU0sVUFBVTtBQUVwQixVQUFLLFNBQVMsTUFBTTtBQUtwQixVQUFNLGFBQWEsT0FBTyxLQUFLLE9BQU8sMENBQTJCLElBQUksU0FBUztBQUU5RSxRQUFJLE1BQUssTUFBTSxVQUFVLEdBQUc7QUFDMUIsYUFBTyxPQUFPLEtBQUssUUFBUSxNQUFLLE1BQU0sVUFBVSxDQUFDO0FBQUEsSUFDbkQsT0FBTztBQUNMLFVBQUksMENBQTJCLEdBQUc7QUFDaEMsYUFBSyxNQUFNLFFBQVEsQ0FBQyxTQUFTO0FBQzNCLGdCQUFLLE1BQU0sVUFBVSxJQUFJO0FBQ3pCLGlCQUFPLE9BQU8sS0FBSyxRQUFRLElBQUk7QUFBQSxRQUNqQyxDQUFDO0FBQUEsTUFDSCxPQUFPO0FBQ0wsY0FBTSxNQUFNLFFBQVEsQ0FBQyxTQUFTO0FBQzVCLGdCQUFLLE1BQU0sVUFBVSxJQUFJO0FBQ3pCLGlCQUFPLE9BQU8sS0FBSyxRQUFRLElBQUk7QUFBQSxRQUNqQyxDQUFDO0FBQUEsTUFDSDtBQUFBLElBQ0Y7QUFFQSxRQUFJLGlCQUFpQixTQUFTLE1BQU07QUFDbEMsV0FBSyxhQUFhLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBR0QsV0FBTztBQUFBLEVBQ1Q7QUFBQSxFQUdBLE9BQU8sU0FBUyxRQUFRO0FBQ3RCLFFBQUksQ0FBQyx3QkFBa0IsS0FBSyx3QkFBa0IsSUFBSSxPQUFRLHdCQUFrQixJQUFJLE1BQU07QUFDcEYsYUFBTyw2U0FBbUM7QUFDMUM7QUFBQSxJQUNGO0FBRUEsV0FBTyxXQUFXO0FBQUEsRUFDcEI7QUFDRjtBQXpLQSxJQUFxQixPQUFyQjtBQUFxQixLQUNaLFFBQVEsQ0FBQzsiLAogICJuYW1lcyI6IFsiaW1wb3J0X29ic2lkaWFuIiwgImludGVuc2l0eSIsICJjYW52YXMiLCAieSIsICJfYSJdCn0K
